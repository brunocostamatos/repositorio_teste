/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
   interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
   objectTypes: {
      fields: {
         Query: QueryObject
         User: UserObject
         UserConnection: UserConnectionObject
         PageInfo: PageInfoObject
         UserEdge: UserEdgeObject
         AggregateUser: AggregateUserObject
         Config: ConfigObject
         ConfigConnection: ConfigConnectionObject
         ConfigEdge: ConfigEdgeObject
         AggregateConfig: AggregateConfigObject
         Source: SourceObject
         Item: ItemObject
         Tag: TagObject
         Wave: WaveObject
         Cron: CronObject
         SourceConnection: SourceConnectionObject
         SourceEdge: SourceEdgeObject
         AggregateSource: AggregateSourceObject
         TagConnection: TagConnectionObject
         TagEdge: TagEdgeObject
         AggregateTag: AggregateTagObject
         ItemConnection: ItemConnectionObject
         ItemEdge: ItemEdgeObject
         AggregateItem: AggregateItemObject
         WaveConnection: WaveConnectionObject
         WaveEdge: WaveEdgeObject
         AggregateWave: AggregateWaveObject
         CronConnection: CronConnectionObject
         CronEdge: CronEdgeObject
         AggregateCron: AggregateCronObject
         Mutation: MutationObject
         BatchPayload: BatchPayloadObject
         Subscription: SubscriptionObject
         UserSubscriptionPayload: UserSubscriptionPayloadObject
         UserPreviousValues: UserPreviousValuesObject
         ConfigSubscriptionPayload: ConfigSubscriptionPayloadObject
         ConfigPreviousValues: ConfigPreviousValuesObject
         SourceSubscriptionPayload: SourceSubscriptionPayloadObject
         SourcePreviousValues: SourcePreviousValuesObject
         TagSubscriptionPayload: TagSubscriptionPayloadObject
         TagPreviousValues: TagPreviousValuesObject
         ItemSubscriptionPayload: ItemSubscriptionPayloadObject
         ItemPreviousValues: ItemPreviousValuesObject
         WaveSubscriptionPayload: WaveSubscriptionPayloadObject
         WavePreviousValues: WavePreviousValuesObject
         CronSubscriptionPayload: CronSubscriptionPayloadObject
         CronPreviousValues: CronPreviousValuesObject
      }
      fieldsDetails: {
         Query: QueryFieldDetails
         User: UserFieldDetails
         UserConnection: UserConnectionFieldDetails
         PageInfo: PageInfoFieldDetails
         UserEdge: UserEdgeFieldDetails
         AggregateUser: AggregateUserFieldDetails
         Config: ConfigFieldDetails
         ConfigConnection: ConfigConnectionFieldDetails
         ConfigEdge: ConfigEdgeFieldDetails
         AggregateConfig: AggregateConfigFieldDetails
         Source: SourceFieldDetails
         Item: ItemFieldDetails
         Tag: TagFieldDetails
         Wave: WaveFieldDetails
         Cron: CronFieldDetails
         SourceConnection: SourceConnectionFieldDetails
         SourceEdge: SourceEdgeFieldDetails
         AggregateSource: AggregateSourceFieldDetails
         TagConnection: TagConnectionFieldDetails
         TagEdge: TagEdgeFieldDetails
         AggregateTag: AggregateTagFieldDetails
         ItemConnection: ItemConnectionFieldDetails
         ItemEdge: ItemEdgeFieldDetails
         AggregateItem: AggregateItemFieldDetails
         WaveConnection: WaveConnectionFieldDetails
         WaveEdge: WaveEdgeFieldDetails
         AggregateWave: AggregateWaveFieldDetails
         CronConnection: CronConnectionFieldDetails
         CronEdge: CronEdgeFieldDetails
         AggregateCron: AggregateCronFieldDetails
         Mutation: MutationFieldDetails
         BatchPayload: BatchPayloadFieldDetails
         Subscription: SubscriptionFieldDetails
         UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
         UserPreviousValues: UserPreviousValuesFieldDetails
         ConfigSubscriptionPayload: ConfigSubscriptionPayloadFieldDetails
         ConfigPreviousValues: ConfigPreviousValuesFieldDetails
         SourceSubscriptionPayload: SourceSubscriptionPayloadFieldDetails
         SourcePreviousValues: SourcePreviousValuesFieldDetails
         TagSubscriptionPayload: TagSubscriptionPayloadFieldDetails
         TagPreviousValues: TagPreviousValuesFieldDetails
         ItemSubscriptionPayload: ItemSubscriptionPayloadFieldDetails
         ItemPreviousValues: ItemPreviousValuesFieldDetails
         WaveSubscriptionPayload: WaveSubscriptionPayloadFieldDetails
         WavePreviousValues: WavePreviousValuesFieldDetails
         CronSubscriptionPayload: CronSubscriptionPayloadFieldDetails
         CronPreviousValues: CronPreviousValuesFieldDetails
      }
   }
   inputTypes: {
      fields: {
         UserWhereUniqueInput: UserWhereUniqueInputInputObject
         UserWhereInput: UserWhereInputInputObject
         ConfigWhereUniqueInput: ConfigWhereUniqueInputInputObject
         ConfigWhereInput: ConfigWhereInputInputObject
         SourceWhereUniqueInput: SourceWhereUniqueInputInputObject
         ItemWhereInput: ItemWhereInputInputObject
         TagWhereInput: TagWhereInputInputObject
         SourceWhereInput: SourceWhereInputInputObject
         CronWhereInput: CronWhereInputInputObject
         WaveWhereInput: WaveWhereInputInputObject
         TagWhereUniqueInput: TagWhereUniqueInputInputObject
         ItemWhereUniqueInput: ItemWhereUniqueInputInputObject
         WaveWhereUniqueInput: WaveWhereUniqueInputInputObject
         CronWhereUniqueInput: CronWhereUniqueInputInputObject
         UserCreateInput: UserCreateInputInputObject
         UserUpdateInput: UserUpdateInputInputObject
         UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
         ConfigCreateInput: ConfigCreateInputInputObject
         ConfigUpdateInput: ConfigUpdateInputInputObject
         ConfigUpdateManyMutationInput: ConfigUpdateManyMutationInputInputObject
         SourceCreateInput: SourceCreateInputInputObject
         ItemCreateManyWithoutSourceInput: ItemCreateManyWithoutSourceInputInputObject
         ItemCreateWithoutSourceInput: ItemCreateWithoutSourceInputInputObject
         TagCreateManyInput: TagCreateManyInputInputObject
         TagCreateInput: TagCreateInputInputObject
         WaveCreateOneInput: WaveCreateOneInputInputObject
         WaveCreateInput: WaveCreateInputInputObject
         WaveCreatewaveInput: WaveCreatewaveInputInputObject
         CronCreateOneInput: CronCreateOneInputInputObject
         CronCreateInput: CronCreateInputInputObject
         SourceUpdateInput: SourceUpdateInputInputObject
         ItemUpdateManyWithoutSourceInput: ItemUpdateManyWithoutSourceInputInputObject
         ItemUpdateWithWhereUniqueWithoutSourceInput: ItemUpdateWithWhereUniqueWithoutSourceInputInputObject
         ItemUpdateWithoutSourceDataInput: ItemUpdateWithoutSourceDataInputInputObject
         TagUpdateManyInput: TagUpdateManyInputInputObject
         TagUpdateWithWhereUniqueNestedInput: TagUpdateWithWhereUniqueNestedInputInputObject
         TagUpdateDataInput: TagUpdateDataInputInputObject
         TagUpsertWithWhereUniqueNestedInput: TagUpsertWithWhereUniqueNestedInputInputObject
         TagScalarWhereInput: TagScalarWhereInputInputObject
         TagUpdateManyWithWhereNestedInput: TagUpdateManyWithWhereNestedInputInputObject
         TagUpdateManyDataInput: TagUpdateManyDataInputInputObject
         WaveUpdateOneInput: WaveUpdateOneInputInputObject
         WaveUpdateDataInput: WaveUpdateDataInputInputObject
         WaveUpdatewaveInput: WaveUpdatewaveInputInputObject
         WaveUpsertNestedInput: WaveUpsertNestedInputInputObject
         ItemUpsertWithWhereUniqueWithoutSourceInput: ItemUpsertWithWhereUniqueWithoutSourceInputInputObject
         ItemScalarWhereInput: ItemScalarWhereInputInputObject
         ItemUpdateManyWithWhereNestedInput: ItemUpdateManyWithWhereNestedInputInputObject
         ItemUpdateManyDataInput: ItemUpdateManyDataInputInputObject
         CronUpdateOneInput: CronUpdateOneInputInputObject
         CronUpdateDataInput: CronUpdateDataInputInputObject
         CronUpsertNestedInput: CronUpsertNestedInputInputObject
         SourceUpdateManyMutationInput: SourceUpdateManyMutationInputInputObject
         TagUpdateInput: TagUpdateInputInputObject
         TagUpdateManyMutationInput: TagUpdateManyMutationInputInputObject
         ItemCreateInput: ItemCreateInputInputObject
         SourceCreateOneWithoutItemsInput: SourceCreateOneWithoutItemsInputInputObject
         SourceCreateWithoutItemsInput: SourceCreateWithoutItemsInputInputObject
         ItemUpdateInput: ItemUpdateInputInputObject
         SourceUpdateOneWithoutItemsInput: SourceUpdateOneWithoutItemsInputInputObject
         SourceUpdateWithoutItemsDataInput: SourceUpdateWithoutItemsDataInputInputObject
         SourceUpsertWithoutItemsInput: SourceUpsertWithoutItemsInputInputObject
         ItemUpdateManyMutationInput: ItemUpdateManyMutationInputInputObject
         WaveUpdateInput: WaveUpdateInputInputObject
         WaveUpdateManyMutationInput: WaveUpdateManyMutationInputInputObject
         CronUpdateInput: CronUpdateInputInputObject
         CronUpdateManyMutationInput: CronUpdateManyMutationInputInputObject
         UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
         ConfigSubscriptionWhereInput: ConfigSubscriptionWhereInputInputObject
         SourceSubscriptionWhereInput: SourceSubscriptionWhereInputInputObject
         TagSubscriptionWhereInput: TagSubscriptionWhereInputInputObject
         ItemSubscriptionWhereInput: ItemSubscriptionWhereInputInputObject
         WaveSubscriptionWhereInput: WaveSubscriptionWhereInputInputObject
         CronSubscriptionWhereInput: CronSubscriptionWhereInputInputObject
      }
   }
   enumTypes: {
      UserOrderByInput: UserOrderByInputValues
      ConfigOrderByInput: ConfigOrderByInputValues
      SourceEnum: SourceEnumValues
      CronEnum: CronEnumValues
      ItemOrderByInput: ItemOrderByInputValues
      TagOrderByInput: TagOrderByInputValues
      SourceOrderByInput: SourceOrderByInputValues
      WaveOrderByInput: WaveOrderByInputValues
      CronOrderByInput: CronOrderByInputValues
      MutationType: MutationTypeValues
   }
}

// Types for Query

type QueryObject =
   | QueryFields
   | { name: 'user'; args?: QueryUserArgs[] | false; alias?: string }
   | { name: 'users'; args?: QueryUsersArgs[] | false; alias?: string }
   | {
        name: 'usersConnection'
        args?: QueryUsersConnectionArgs[] | false
        alias?: string
     }
   | { name: 'config'; args?: QueryConfigArgs[] | false; alias?: string }
   | { name: 'configs'; args?: QueryConfigsArgs[] | false; alias?: string }
   | {
        name: 'configsConnection'
        args?: QueryConfigsConnectionArgs[] | false
        alias?: string
     }
   | { name: 'source'; args?: QuerySourceArgs[] | false; alias?: string }
   | { name: 'sources'; args?: QuerySourcesArgs[] | false; alias?: string }
   | {
        name: 'sourcesConnection'
        args?: QuerySourcesConnectionArgs[] | false
        alias?: string
     }
   | { name: 'tag'; args?: QueryTagArgs[] | false; alias?: string }
   | { name: 'tags'; args?: QueryTagsArgs[] | false; alias?: string }
   | {
        name: 'tagsConnection'
        args?: QueryTagsConnectionArgs[] | false
        alias?: string
     }
   | { name: 'item'; args?: QueryItemArgs[] | false; alias?: string }
   | { name: 'items'; args?: QueryItemsArgs[] | false; alias?: string }
   | {
        name: 'itemsConnection'
        args?: QueryItemsConnectionArgs[] | false
        alias?: string
     }
   | { name: 'wave'; args?: QueryWaveArgs[] | false; alias?: string }
   | { name: 'waves'; args?: QueryWavesArgs[] | false; alias?: string }
   | {
        name: 'wavesConnection'
        args?: QueryWavesConnectionArgs[] | false
        alias?: string
     }
   | { name: 'cron'; args?: QueryCronArgs[] | false; alias?: string }
   | { name: 'crons'; args?: QueryCronsArgs[] | false; alias?: string }
   | {
        name: 'cronsConnection'
        args?: QueryCronsConnectionArgs[] | false
        alias?: string
     }

type QueryFields =
   | 'user'
   | 'users'
   | 'usersConnection'
   | 'config'
   | 'configs'
   | 'configsConnection'
   | 'source'
   | 'sources'
   | 'sourcesConnection'
   | 'tag'
   | 'tags'
   | 'tagsConnection'
   | 'item'
   | 'items'
   | 'itemsConnection'
   | 'wave'
   | 'waves'
   | 'wavesConnection'
   | 'cron'
   | 'crons'
   | 'cronsConnection'

type QueryUserArgs = 'where'
type QueryUsersArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryUsersConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryConfigArgs = 'where'
type QueryConfigsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryConfigsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QuerySourceArgs = 'where'
type QuerySourcesArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QuerySourcesConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTagArgs = 'where'
type QueryTagsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTagsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryItemArgs = 'where'
type QueryItemsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryItemsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryWaveArgs = 'where'
type QueryWavesArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryWavesConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryCronArgs = 'where'
type QueryCronsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryCronsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface QueryFieldDetails {
   user: {
      type: 'User'
      args: Record<QueryUserArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: UserWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User | null> | prisma.User | null
   }
   users: {
      type: 'User'
      args: Record<QueryUsersArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: UserWhereInput | null
            orderBy?: prisma.UserOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User[]> | prisma.User[]
   }
   usersConnection: {
      type: 'UserConnection'
      args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: UserWhereInput | null
            orderBy?: prisma.UserOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.UserConnection> | prisma.UserConnection
   }
   config: {
      type: 'Config'
      args: Record<QueryConfigArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: ConfigWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config | null> | prisma.Config | null
   }
   configs: {
      type: 'Config'
      args: Record<QueryConfigsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: ConfigWhereInput | null
            orderBy?: prisma.ConfigOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config[]> | prisma.Config[]
   }
   configsConnection: {
      type: 'ConfigConnection'
      args: Record<QueryConfigsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: ConfigWhereInput | null
            orderBy?: prisma.ConfigOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.ConfigConnection> | prisma.ConfigConnection
   }
   source: {
      type: 'Source'
      args: Record<QuerySourceArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: SourceWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source | null> | prisma.Source | null
   }
   sources: {
      type: 'Source'
      args: Record<QuerySourcesArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: SourceWhereInput | null
            orderBy?: prisma.SourceOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source[]> | prisma.Source[]
   }
   sourcesConnection: {
      type: 'SourceConnection'
      args: Record<QuerySourcesConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: SourceWhereInput | null
            orderBy?: prisma.SourceOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.SourceConnection> | prisma.SourceConnection
   }
   tag: {
      type: 'Tag'
      args: Record<QueryTagArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: TagWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag | null> | prisma.Tag | null
   }
   tags: {
      type: 'Tag'
      args: Record<QueryTagsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TagWhereInput | null
            orderBy?: prisma.TagOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag[]> | prisma.Tag[]
   }
   tagsConnection: {
      type: 'TagConnection'
      args: Record<QueryTagsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TagWhereInput | null
            orderBy?: prisma.TagOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.TagConnection> | prisma.TagConnection
   }
   item: {
      type: 'Item'
      args: Record<QueryItemArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: ItemWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item | null> | prisma.Item | null
   }
   items: {
      type: 'Item'
      args: Record<QueryItemsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: ItemWhereInput | null
            orderBy?: prisma.ItemOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item[]> | prisma.Item[]
   }
   itemsConnection: {
      type: 'ItemConnection'
      args: Record<QueryItemsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: ItemWhereInput | null
            orderBy?: prisma.ItemOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.ItemConnection> | prisma.ItemConnection
   }
   wave: {
      type: 'Wave'
      args: Record<QueryWaveArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: WaveWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave | null> | prisma.Wave | null
   }
   waves: {
      type: 'Wave'
      args: Record<QueryWavesArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: WaveWhereInput | null
            orderBy?: prisma.WaveOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave[]> | prisma.Wave[]
   }
   wavesConnection: {
      type: 'WaveConnection'
      args: Record<QueryWavesConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: WaveWhereInput | null
            orderBy?: prisma.WaveOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.WaveConnection> | prisma.WaveConnection
   }
   cron: {
      type: 'Cron'
      args: Record<QueryCronArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: CronWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron | null> | prisma.Cron | null
   }
   crons: {
      type: 'Cron'
      args: Record<QueryCronsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: CronWhereInput | null
            orderBy?: prisma.CronOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron[]> | prisma.Cron[]
   }
   cronsConnection: {
      type: 'CronConnection'
      args: Record<QueryCronsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: CronWhereInput | null
            orderBy?: prisma.CronOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.CronConnection> | prisma.CronConnection
   }
}

// Types for User

type UserObject =
   | UserFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'bio'; args?: [] | false; alias?: string }
   | { name: 'userName'; args?: [] | false; alias?: string }
   | { name: 'email'; args?: [] | false; alias?: string }
   | { name: 'password'; args?: [] | false; alias?: string }

type UserFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'name'
   | 'bio'
   | 'userName'
   | 'email'
   | 'password'

export interface UserFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   bio: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   userName: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   email: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   password: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for UserConnection

type UserConnectionObject =
   | UserConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type UserConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface UserConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'UserConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'UserEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'UserConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
   }
   aggregate: {
      type: 'AggregateUser'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'UserConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
   }
}

// Types for PageInfo

type PageInfoObject =
   | PageInfoFields
   | { name: 'hasNextPage'; args?: [] | false; alias?: string }
   | { name: 'hasPreviousPage'; args?: [] | false; alias?: string }
   | { name: 'startCursor'; args?: [] | false; alias?: string }
   | { name: 'endCursor'; args?: [] | false; alias?: string }

type PageInfoFields =
   | 'hasNextPage'
   | 'hasPreviousPage'
   | 'startCursor'
   | 'endCursor'

export interface PageInfoFieldDetails {
   hasNextPage: {
      type: 'Boolean'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   hasPreviousPage: {
      type: 'Boolean'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   startCursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   endCursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for UserEdge

type UserEdgeObject =
   | UserEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type UserEdgeFields = 'node' | 'cursor'

export interface UserEdgeFieldDetails {
   node: {
      type: 'User'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'UserEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User> | prisma.User
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateUser

type AggregateUserObject =
   | AggregateUserFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateUserFields = 'count'

export interface AggregateUserFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Config

type ConfigObject =
   | ConfigFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'timeZone'; args?: [] | false; alias?: string }
   | { name: 'liveUrl'; args?: [] | false; alias?: string }
   | { name: 'liveStatusUrl'; args?: [] | false; alias?: string }
   | { name: 'placeholderCover'; args?: [] | false; alias?: string }

type ConfigFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'timeZone'
   | 'liveUrl'
   | 'liveStatusUrl'
   | 'placeholderCover'

export interface ConfigFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   timeZone: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   liveUrl: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   liveStatusUrl: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   placeholderCover: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for ConfigConnection

type ConfigConnectionObject =
   | ConfigConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type ConfigConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface ConfigConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ConfigConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'ConfigEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'ConfigConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.ConfigEdge[]> | prisma.ConfigEdge[]
   }
   aggregate: {
      type: 'AggregateConfig'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ConfigConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateConfig> | prisma.AggregateConfig
   }
}

// Types for ConfigEdge

type ConfigEdgeObject =
   | ConfigEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type ConfigEdgeFields = 'node' | 'cursor'

export interface ConfigEdgeFieldDetails {
   node: {
      type: 'Config'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ConfigEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config> | prisma.Config
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateConfig

type AggregateConfigObject =
   | AggregateConfigFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateConfigFields = 'count'

export interface AggregateConfigFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Source

type SourceObject =
   | SourceFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'slug'; args?: [] | false; alias?: string }
   | { name: 'url'; args?: [] | false; alias?: string }
   | { name: 'type'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'description'; args?: [] | false; alias?: string }
   | { name: 'items'; args?: SourceItemsArgs[] | false; alias?: string }
   | { name: 'timer'; args?: [] | false; alias?: string }
   | { name: 'cron'; args?: [] | false; alias?: string }
   | { name: 'cover'; args?: [] | false; alias?: string }

type SourceFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'slug'
   | 'url'
   | 'type'
   | 'title'
   | 'description'
   | 'items'
   | 'timer'
   | 'cron'
   | 'cover'

type SourceItemsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface SourceFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   slug: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   url: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   type: {
      type: 'SourceEnum'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Source'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.SourceEnum> | prisma.SourceEnum
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   description: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   items: {
      type: 'Item'
      args: Record<SourceItemsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Source'>,
         args: {
            where?: ItemWhereInput | null
            orderBy?: prisma.ItemOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item[]> | prisma.Item[]
   }
   timer: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   cron: {
      type: 'Cron'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Source'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron | null> | prisma.Cron | null
   }
   cover: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for Item

type ItemObject =
   | ItemFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'slug'; args?: [] | false; alias?: string }
   | { name: 'guid'; args?: [] | false; alias?: string }
   | { name: 'tags'; args?: ItemTagsArgs[] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'description'; args?: [] | false; alias?: string }
   | { name: 'publishedAt'; args?: [] | false; alias?: string }
   | { name: 'download'; args?: [] | false; alias?: string }
   | { name: 'url'; args?: [] | false; alias?: string }
   | { name: 'length'; args?: [] | false; alias?: string }
   | { name: 'type'; args?: [] | false; alias?: string }
   | { name: 'source'; args?: [] | false; alias?: string }
   | { name: 'waveform'; args?: [] | false; alias?: string }

type ItemFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'slug'
   | 'guid'
   | 'tags'
   | 'title'
   | 'description'
   | 'publishedAt'
   | 'download'
   | 'url'
   | 'length'
   | 'type'
   | 'source'
   | 'waveform'

type ItemTagsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface ItemFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   slug: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   guid: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   tags: {
      type: 'Tag'
      args: Record<ItemTagsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Item'>,
         args: {
            where?: TagWhereInput | null
            orderBy?: prisma.TagOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag[]> | prisma.Tag[]
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   description: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   publishedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   download: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   url: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   length: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   type: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   source: {
      type: 'Source'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Item'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source | null> | prisma.Source | null
   }
   waveform: {
      type: 'Wave'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Item'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave | null> | prisma.Wave | null
   }
}

// Types for Tag

type TagObject =
   | TagFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'tag'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'text'; args?: [] | false; alias?: string }

type TagFields = 'id' | 'createdAt' | 'updatedAt' | 'tag' | 'name' | 'text'

export interface TagFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   tag: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   text: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Wave

type WaveObject =
   | WaveFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'url'; args?: [] | false; alias?: string }
   | { name: 'wave'; args?: [] | false; alias?: string }

type WaveFields = 'id' | 'createdAt' | 'updatedAt' | 'url' | 'wave'

export interface WaveFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   url: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   wave: {
      type: 'Float'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
}

// Types for Cron

type CronObject =
   | CronFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'pid'; args?: [] | false; alias?: string }
   | { name: 'health'; args?: [] | false; alias?: string }
   | { name: 'status'; args?: [] | false; alias?: string }
   | { name: 'lastMessage'; args?: [] | false; alias?: string }

type CronFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'pid'
   | 'health'
   | 'status'
   | 'lastMessage'

export interface CronFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   pid: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   health: {
      type: 'Boolean'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   status: {
      type: 'CronEnum'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Cron'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.CronEnum> | prisma.CronEnum
   }
   lastMessage: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for SourceConnection

type SourceConnectionObject =
   | SourceConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type SourceConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface SourceConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'SourceConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'SourceEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'SourceConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.SourceEdge[]> | prisma.SourceEdge[]
   }
   aggregate: {
      type: 'AggregateSource'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'SourceConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateSource> | prisma.AggregateSource
   }
}

// Types for SourceEdge

type SourceEdgeObject =
   | SourceEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type SourceEdgeFields = 'node' | 'cursor'

export interface SourceEdgeFieldDetails {
   node: {
      type: 'Source'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'SourceEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source> | prisma.Source
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateSource

type AggregateSourceObject =
   | AggregateSourceFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateSourceFields = 'count'

export interface AggregateSourceFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for TagConnection

type TagConnectionObject =
   | TagConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type TagConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface TagConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TagConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'TagEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'TagConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.TagEdge[]> | prisma.TagEdge[]
   }
   aggregate: {
      type: 'AggregateTag'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TagConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateTag> | prisma.AggregateTag
   }
}

// Types for TagEdge

type TagEdgeObject =
   | TagEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type TagEdgeFields = 'node' | 'cursor'

export interface TagEdgeFieldDetails {
   node: {
      type: 'Tag'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TagEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag> | prisma.Tag
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateTag

type AggregateTagObject =
   | AggregateTagFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateTagFields = 'count'

export interface AggregateTagFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for ItemConnection

type ItemConnectionObject =
   | ItemConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type ItemConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface ItemConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ItemConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'ItemEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'ItemConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.ItemEdge[]> | prisma.ItemEdge[]
   }
   aggregate: {
      type: 'AggregateItem'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ItemConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateItem> | prisma.AggregateItem
   }
}

// Types for ItemEdge

type ItemEdgeObject =
   | ItemEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type ItemEdgeFields = 'node' | 'cursor'

export interface ItemEdgeFieldDetails {
   node: {
      type: 'Item'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ItemEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item> | prisma.Item
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateItem

type AggregateItemObject =
   | AggregateItemFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateItemFields = 'count'

export interface AggregateItemFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for WaveConnection

type WaveConnectionObject =
   | WaveConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type WaveConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface WaveConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WaveConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'WaveEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'WaveConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.WaveEdge[]> | prisma.WaveEdge[]
   }
   aggregate: {
      type: 'AggregateWave'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WaveConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateWave> | prisma.AggregateWave
   }
}

// Types for WaveEdge

type WaveEdgeObject =
   | WaveEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type WaveEdgeFields = 'node' | 'cursor'

export interface WaveEdgeFieldDetails {
   node: {
      type: 'Wave'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WaveEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave> | prisma.Wave
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateWave

type AggregateWaveObject =
   | AggregateWaveFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateWaveFields = 'count'

export interface AggregateWaveFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for CronConnection

type CronConnectionObject =
   | CronConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type CronConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface CronConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CronConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'CronEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'CronConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.CronEdge[]> | prisma.CronEdge[]
   }
   aggregate: {
      type: 'AggregateCron'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CronConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.AggregateCron> | prisma.AggregateCron
   }
}

// Types for CronEdge

type CronEdgeObject =
   | CronEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type CronEdgeFields = 'node' | 'cursor'

export interface CronEdgeFieldDetails {
   node: {
      type: 'Cron'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CronEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron> | prisma.Cron
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateCron

type AggregateCronObject =
   | AggregateCronFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateCronFields = 'count'

export interface AggregateCronFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Mutation

type MutationObject =
   | MutationFields
   | {
        name: 'createUser'
        args?: MutationCreateUserArgs[] | false
        alias?: string
     }
   | {
        name: 'updateUser'
        args?: MutationUpdateUserArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyUsers'
        args?: MutationUpdateManyUsersArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertUser'
        args?: MutationUpsertUserArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteUser'
        args?: MutationDeleteUserArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyUsers'
        args?: MutationDeleteManyUsersArgs[] | false
        alias?: string
     }
   | {
        name: 'createConfig'
        args?: MutationCreateConfigArgs[] | false
        alias?: string
     }
   | {
        name: 'updateConfig'
        args?: MutationUpdateConfigArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyConfigs'
        args?: MutationUpdateManyConfigsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertConfig'
        args?: MutationUpsertConfigArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteConfig'
        args?: MutationDeleteConfigArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyConfigs'
        args?: MutationDeleteManyConfigsArgs[] | false
        alias?: string
     }
   | {
        name: 'createSource'
        args?: MutationCreateSourceArgs[] | false
        alias?: string
     }
   | {
        name: 'updateSource'
        args?: MutationUpdateSourceArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManySources'
        args?: MutationUpdateManySourcesArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertSource'
        args?: MutationUpsertSourceArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteSource'
        args?: MutationDeleteSourceArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManySources'
        args?: MutationDeleteManySourcesArgs[] | false
        alias?: string
     }
   | {
        name: 'createTag'
        args?: MutationCreateTagArgs[] | false
        alias?: string
     }
   | {
        name: 'updateTag'
        args?: MutationUpdateTagArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyTags'
        args?: MutationUpdateManyTagsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertTag'
        args?: MutationUpsertTagArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteTag'
        args?: MutationDeleteTagArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyTags'
        args?: MutationDeleteManyTagsArgs[] | false
        alias?: string
     }
   | {
        name: 'createItem'
        args?: MutationCreateItemArgs[] | false
        alias?: string
     }
   | {
        name: 'updateItem'
        args?: MutationUpdateItemArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyItems'
        args?: MutationUpdateManyItemsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertItem'
        args?: MutationUpsertItemArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteItem'
        args?: MutationDeleteItemArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyItems'
        args?: MutationDeleteManyItemsArgs[] | false
        alias?: string
     }
   | {
        name: 'createWave'
        args?: MutationCreateWaveArgs[] | false
        alias?: string
     }
   | {
        name: 'updateWave'
        args?: MutationUpdateWaveArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyWaves'
        args?: MutationUpdateManyWavesArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertWave'
        args?: MutationUpsertWaveArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteWave'
        args?: MutationDeleteWaveArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyWaves'
        args?: MutationDeleteManyWavesArgs[] | false
        alias?: string
     }
   | {
        name: 'createCron'
        args?: MutationCreateCronArgs[] | false
        alias?: string
     }
   | {
        name: 'updateCron'
        args?: MutationUpdateCronArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyCrons'
        args?: MutationUpdateManyCronsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertCron'
        args?: MutationUpsertCronArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteCron'
        args?: MutationDeleteCronArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyCrons'
        args?: MutationDeleteManyCronsArgs[] | false
        alias?: string
     }

type MutationFields =
   | 'createUser'
   | 'updateUser'
   | 'updateManyUsers'
   | 'upsertUser'
   | 'deleteUser'
   | 'deleteManyUsers'
   | 'createConfig'
   | 'updateConfig'
   | 'updateManyConfigs'
   | 'upsertConfig'
   | 'deleteConfig'
   | 'deleteManyConfigs'
   | 'createSource'
   | 'updateSource'
   | 'updateManySources'
   | 'upsertSource'
   | 'deleteSource'
   | 'deleteManySources'
   | 'createTag'
   | 'updateTag'
   | 'updateManyTags'
   | 'upsertTag'
   | 'deleteTag'
   | 'deleteManyTags'
   | 'createItem'
   | 'updateItem'
   | 'updateManyItems'
   | 'upsertItem'
   | 'deleteItem'
   | 'deleteManyItems'
   | 'createWave'
   | 'updateWave'
   | 'updateManyWaves'
   | 'upsertWave'
   | 'deleteWave'
   | 'deleteManyWaves'
   | 'createCron'
   | 'updateCron'
   | 'updateManyCrons'
   | 'upsertCron'
   | 'deleteCron'
   | 'deleteManyCrons'

type MutationCreateUserArgs = 'data'
type MutationUpdateUserArgs = 'data' | 'where'
type MutationUpdateManyUsersArgs = 'data' | 'where'
type MutationUpsertUserArgs = 'where' | 'create' | 'update'
type MutationDeleteUserArgs = 'where'
type MutationDeleteManyUsersArgs = 'where'
type MutationCreateConfigArgs = 'data'
type MutationUpdateConfigArgs = 'data' | 'where'
type MutationUpdateManyConfigsArgs = 'data' | 'where'
type MutationUpsertConfigArgs = 'where' | 'create' | 'update'
type MutationDeleteConfigArgs = 'where'
type MutationDeleteManyConfigsArgs = 'where'
type MutationCreateSourceArgs = 'data'
type MutationUpdateSourceArgs = 'data' | 'where'
type MutationUpdateManySourcesArgs = 'data' | 'where'
type MutationUpsertSourceArgs = 'where' | 'create' | 'update'
type MutationDeleteSourceArgs = 'where'
type MutationDeleteManySourcesArgs = 'where'
type MutationCreateTagArgs = 'data'
type MutationUpdateTagArgs = 'data' | 'where'
type MutationUpdateManyTagsArgs = 'data' | 'where'
type MutationUpsertTagArgs = 'where' | 'create' | 'update'
type MutationDeleteTagArgs = 'where'
type MutationDeleteManyTagsArgs = 'where'
type MutationCreateItemArgs = 'data'
type MutationUpdateItemArgs = 'data' | 'where'
type MutationUpdateManyItemsArgs = 'data' | 'where'
type MutationUpsertItemArgs = 'where' | 'create' | 'update'
type MutationDeleteItemArgs = 'where'
type MutationDeleteManyItemsArgs = 'where'
type MutationCreateWaveArgs = 'data'
type MutationUpdateWaveArgs = 'data' | 'where'
type MutationUpdateManyWavesArgs = 'data' | 'where'
type MutationUpsertWaveArgs = 'where' | 'create' | 'update'
type MutationDeleteWaveArgs = 'where'
type MutationDeleteManyWavesArgs = 'where'
type MutationCreateCronArgs = 'data'
type MutationUpdateCronArgs = 'data' | 'where'
type MutationUpdateManyCronsArgs = 'data' | 'where'
type MutationUpsertCronArgs = 'where' | 'create' | 'update'
type MutationDeleteCronArgs = 'where'
type MutationDeleteManyCronsArgs = 'where'

export interface MutationFieldDetails {
   createUser: {
      type: 'User'
      args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: UserCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User> | prisma.User
   }
   updateUser: {
      type: 'User'
      args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: UserUpdateInput; where: UserWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User | null> | prisma.User | null
   }
   updateManyUsers: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: UserUpdateManyMutationInput
            where?: UserWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertUser: {
      type: 'User'
      args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: UserWhereUniqueInput
            create: UserCreateInput
            update: UserUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User> | prisma.User
   }
   deleteUser: {
      type: 'User'
      args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: UserWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User | null> | prisma.User | null
   }
   deleteManyUsers: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: UserWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createConfig: {
      type: 'Config'
      args: Record<MutationCreateConfigArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: ConfigCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config> | prisma.Config
   }
   updateConfig: {
      type: 'Config'
      args: Record<MutationUpdateConfigArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: ConfigUpdateInput; where: ConfigWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config | null> | prisma.Config | null
   }
   updateManyConfigs: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyConfigsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: ConfigUpdateManyMutationInput
            where?: ConfigWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertConfig: {
      type: 'Config'
      args: Record<MutationUpsertConfigArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: ConfigWhereUniqueInput
            create: ConfigCreateInput
            update: ConfigUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config> | prisma.Config
   }
   deleteConfig: {
      type: 'Config'
      args: Record<MutationDeleteConfigArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: ConfigWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config | null> | prisma.Config | null
   }
   deleteManyConfigs: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyConfigsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: ConfigWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createSource: {
      type: 'Source'
      args: Record<MutationCreateSourceArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: SourceCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source> | prisma.Source
   }
   updateSource: {
      type: 'Source'
      args: Record<MutationUpdateSourceArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: SourceUpdateInput; where: SourceWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source | null> | prisma.Source | null
   }
   updateManySources: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManySourcesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: SourceUpdateManyMutationInput
            where?: SourceWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertSource: {
      type: 'Source'
      args: Record<MutationUpsertSourceArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: SourceWhereUniqueInput
            create: SourceCreateInput
            update: SourceUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source> | prisma.Source
   }
   deleteSource: {
      type: 'Source'
      args: Record<MutationDeleteSourceArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: SourceWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source | null> | prisma.Source | null
   }
   deleteManySources: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManySourcesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: SourceWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createTag: {
      type: 'Tag'
      args: Record<MutationCreateTagArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: TagCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag> | prisma.Tag
   }
   updateTag: {
      type: 'Tag'
      args: Record<MutationUpdateTagArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: TagUpdateInput; where: TagWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag | null> | prisma.Tag | null
   }
   updateManyTags: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyTagsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: TagUpdateManyMutationInput
            where?: TagWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertTag: {
      type: 'Tag'
      args: Record<MutationUpsertTagArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: TagWhereUniqueInput
            create: TagCreateInput
            update: TagUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag> | prisma.Tag
   }
   deleteTag: {
      type: 'Tag'
      args: Record<MutationDeleteTagArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: TagWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag | null> | prisma.Tag | null
   }
   deleteManyTags: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyTagsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: TagWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createItem: {
      type: 'Item'
      args: Record<MutationCreateItemArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: ItemCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item> | prisma.Item
   }
   updateItem: {
      type: 'Item'
      args: Record<MutationUpdateItemArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: ItemUpdateInput; where: ItemWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item | null> | prisma.Item | null
   }
   updateManyItems: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyItemsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: ItemUpdateManyMutationInput
            where?: ItemWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertItem: {
      type: 'Item'
      args: Record<MutationUpsertItemArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: ItemWhereUniqueInput
            create: ItemCreateInput
            update: ItemUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item> | prisma.Item
   }
   deleteItem: {
      type: 'Item'
      args: Record<MutationDeleteItemArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: ItemWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item | null> | prisma.Item | null
   }
   deleteManyItems: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyItemsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: ItemWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createWave: {
      type: 'Wave'
      args: Record<MutationCreateWaveArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: WaveCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave> | prisma.Wave
   }
   updateWave: {
      type: 'Wave'
      args: Record<MutationUpdateWaveArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: WaveUpdateInput; where: WaveWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave | null> | prisma.Wave | null
   }
   updateManyWaves: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyWavesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: WaveUpdateManyMutationInput
            where?: WaveWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertWave: {
      type: 'Wave'
      args: Record<MutationUpsertWaveArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: WaveWhereUniqueInput
            create: WaveCreateInput
            update: WaveUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave> | prisma.Wave
   }
   deleteWave: {
      type: 'Wave'
      args: Record<MutationDeleteWaveArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: WaveWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave | null> | prisma.Wave | null
   }
   deleteManyWaves: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyWavesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: WaveWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createCron: {
      type: 'Cron'
      args: Record<MutationCreateCronArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: CronCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron> | prisma.Cron
   }
   updateCron: {
      type: 'Cron'
      args: Record<MutationUpdateCronArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: CronUpdateInput; where: CronWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron | null> | prisma.Cron | null
   }
   updateManyCrons: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyCronsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: CronUpdateManyMutationInput
            where?: CronWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertCron: {
      type: 'Cron'
      args: Record<MutationUpsertCronArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: CronWhereUniqueInput
            create: CronCreateInput
            update: CronUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron> | prisma.Cron
   }
   deleteCron: {
      type: 'Cron'
      args: Record<MutationDeleteCronArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: CronWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron | null> | prisma.Cron | null
   }
   deleteManyCrons: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyCronsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: CronWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
}

// Types for BatchPayload

type BatchPayloadObject =
   | BatchPayloadFields
   | { name: 'count'; args?: [] | false; alias?: string }

type BatchPayloadFields = 'count'

export interface BatchPayloadFieldDetails {
   count: {
      type: 'Long'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Subscription

type SubscriptionObject =
   | SubscriptionFields
   | { name: 'user'; args?: SubscriptionUserArgs[] | false; alias?: string }
   | { name: 'config'; args?: SubscriptionConfigArgs[] | false; alias?: string }
   | { name: 'source'; args?: SubscriptionSourceArgs[] | false; alias?: string }
   | { name: 'tag'; args?: SubscriptionTagArgs[] | false; alias?: string }
   | { name: 'item'; args?: SubscriptionItemArgs[] | false; alias?: string }
   | { name: 'wave'; args?: SubscriptionWaveArgs[] | false; alias?: string }
   | { name: 'cron'; args?: SubscriptionCronArgs[] | false; alias?: string }

type SubscriptionFields =
   | 'user'
   | 'config'
   | 'source'
   | 'tag'
   | 'item'
   | 'wave'
   | 'cron'

type SubscriptionUserArgs = 'where'
type SubscriptionConfigArgs = 'where'
type SubscriptionSourceArgs = 'where'
type SubscriptionTagArgs = 'where'
type SubscriptionItemArgs = 'where'
type SubscriptionWaveArgs = 'where'
type SubscriptionCronArgs = 'where'

export interface SubscriptionFieldDetails {
   user: {
      type: 'UserSubscriptionPayload'
      args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: UserSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.UserSubscriptionPayload | null>
         | prisma.UserSubscriptionPayload
         | null
   }
   config: {
      type: 'ConfigSubscriptionPayload'
      args: Record<SubscriptionConfigArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: ConfigSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.ConfigSubscriptionPayload | null>
         | prisma.ConfigSubscriptionPayload
         | null
   }
   source: {
      type: 'SourceSubscriptionPayload'
      args: Record<SubscriptionSourceArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: SourceSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.SourceSubscriptionPayload | null>
         | prisma.SourceSubscriptionPayload
         | null
   }
   tag: {
      type: 'TagSubscriptionPayload'
      args: Record<SubscriptionTagArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: TagSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.TagSubscriptionPayload | null>
         | prisma.TagSubscriptionPayload
         | null
   }
   item: {
      type: 'ItemSubscriptionPayload'
      args: Record<SubscriptionItemArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: ItemSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.ItemSubscriptionPayload | null>
         | prisma.ItemSubscriptionPayload
         | null
   }
   wave: {
      type: 'WaveSubscriptionPayload'
      args: Record<SubscriptionWaveArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: WaveSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.WaveSubscriptionPayload | null>
         | prisma.WaveSubscriptionPayload
         | null
   }
   cron: {
      type: 'CronSubscriptionPayload'
      args: Record<SubscriptionCronArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: CronSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.CronSubscriptionPayload | null>
         | prisma.CronSubscriptionPayload
         | null
   }
}

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
   | UserSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type UserSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface UserSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'UserSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'User'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'UserSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.User | null> | prisma.User | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'UserPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'UserSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.UserPreviousValues | null>
         | prisma.UserPreviousValues
         | null
   }
}

// Types for UserPreviousValues

type UserPreviousValuesObject =
   | UserPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'bio'; args?: [] | false; alias?: string }
   | { name: 'userName'; args?: [] | false; alias?: string }
   | { name: 'email'; args?: [] | false; alias?: string }
   | { name: 'password'; args?: [] | false; alias?: string }

type UserPreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'name'
   | 'bio'
   | 'userName'
   | 'email'
   | 'password'

export interface UserPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   bio: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   userName: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   email: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   password: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for ConfigSubscriptionPayload

type ConfigSubscriptionPayloadObject =
   | ConfigSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type ConfigSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface ConfigSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ConfigSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Config'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'ConfigSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Config | null> | prisma.Config | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'ConfigPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'ConfigSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.ConfigPreviousValues | null>
         | prisma.ConfigPreviousValues
         | null
   }
}

// Types for ConfigPreviousValues

type ConfigPreviousValuesObject =
   | ConfigPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'timeZone'; args?: [] | false; alias?: string }
   | { name: 'liveUrl'; args?: [] | false; alias?: string }
   | { name: 'liveStatusUrl'; args?: [] | false; alias?: string }
   | { name: 'placeholderCover'; args?: [] | false; alias?: string }

type ConfigPreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'timeZone'
   | 'liveUrl'
   | 'liveStatusUrl'
   | 'placeholderCover'

export interface ConfigPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   timeZone: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   liveUrl: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   liveStatusUrl: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   placeholderCover: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for SourceSubscriptionPayload

type SourceSubscriptionPayloadObject =
   | SourceSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type SourceSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface SourceSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'SourceSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Source'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'SourceSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Source | null> | prisma.Source | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'SourcePreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'SourceSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.SourcePreviousValues | null>
         | prisma.SourcePreviousValues
         | null
   }
}

// Types for SourcePreviousValues

type SourcePreviousValuesObject =
   | SourcePreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'slug'; args?: [] | false; alias?: string }
   | { name: 'url'; args?: [] | false; alias?: string }
   | { name: 'type'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'description'; args?: [] | false; alias?: string }
   | { name: 'timer'; args?: [] | false; alias?: string }
   | { name: 'cover'; args?: [] | false; alias?: string }

type SourcePreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'slug'
   | 'url'
   | 'type'
   | 'title'
   | 'description'
   | 'timer'
   | 'cover'

export interface SourcePreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   slug: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   url: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   type: {
      type: 'SourceEnum'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'SourcePreviousValues'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.SourceEnum> | prisma.SourceEnum
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   description: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   timer: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   cover: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for TagSubscriptionPayload

type TagSubscriptionPayloadObject =
   | TagSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type TagSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface TagSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TagSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Tag'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TagSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Tag | null> | prisma.Tag | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'TagPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TagSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.TagPreviousValues | null>
         | prisma.TagPreviousValues
         | null
   }
}

// Types for TagPreviousValues

type TagPreviousValuesObject =
   | TagPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'tag'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'text'; args?: [] | false; alias?: string }

type TagPreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'tag'
   | 'name'
   | 'text'

export interface TagPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   tag: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   text: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for ItemSubscriptionPayload

type ItemSubscriptionPayloadObject =
   | ItemSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type ItemSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface ItemSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ItemSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Item'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'ItemSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Item | null> | prisma.Item | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'ItemPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'ItemSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.ItemPreviousValues | null>
         | prisma.ItemPreviousValues
         | null
   }
}

// Types for ItemPreviousValues

type ItemPreviousValuesObject =
   | ItemPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'slug'; args?: [] | false; alias?: string }
   | { name: 'guid'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'description'; args?: [] | false; alias?: string }
   | { name: 'publishedAt'; args?: [] | false; alias?: string }
   | { name: 'download'; args?: [] | false; alias?: string }
   | { name: 'url'; args?: [] | false; alias?: string }
   | { name: 'length'; args?: [] | false; alias?: string }
   | { name: 'type'; args?: [] | false; alias?: string }

type ItemPreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'slug'
   | 'guid'
   | 'title'
   | 'description'
   | 'publishedAt'
   | 'download'
   | 'url'
   | 'length'
   | 'type'

export interface ItemPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   slug: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   guid: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   description: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   publishedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   download: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   url: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   length: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   type: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for WaveSubscriptionPayload

type WaveSubscriptionPayloadObject =
   | WaveSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type WaveSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface WaveSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WaveSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Wave'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'WaveSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Wave | null> | prisma.Wave | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'WavePreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'WaveSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.WavePreviousValues | null>
         | prisma.WavePreviousValues
         | null
   }
}

// Types for WavePreviousValues

type WavePreviousValuesObject =
   | WavePreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'url'; args?: [] | false; alias?: string }
   | { name: 'wave'; args?: [] | false; alias?: string }

type WavePreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'url'
   | 'wave'

export interface WavePreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   url: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   wave: {
      type: 'Float'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
}

// Types for CronSubscriptionPayload

type CronSubscriptionPayloadObject =
   | CronSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type CronSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface CronSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CronSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Cron'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'CronSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.Cron | null> | prisma.Cron | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'CronPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'CronSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) =>
         | Promise<prisma.CronPreviousValues | null>
         | prisma.CronPreviousValues
         | null
   }
}

// Types for CronPreviousValues

type CronPreviousValuesObject =
   | CronPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'createdAt'; args?: [] | false; alias?: string }
   | { name: 'updatedAt'; args?: [] | false; alias?: string }
   | { name: 'pid'; args?: [] | false; alias?: string }
   | { name: 'health'; args?: [] | false; alias?: string }
   | { name: 'status'; args?: [] | false; alias?: string }
   | { name: 'lastMessage'; args?: [] | false; alias?: string }

type CronPreviousValuesFields =
   | 'id'
   | 'createdAt'
   | 'updatedAt'
   | 'pid'
   | 'health'
   | 'status'
   | 'lastMessage'

export interface CronPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   createdAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   updatedAt: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   pid: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   health: {
      type: 'Boolean'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   status: {
      type: 'CronEnum'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CronPreviousValues'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo
      ) => Promise<prisma.CronEnum> | prisma.CronEnum
   }
   lastMessage: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

export interface UserWhereUniqueInput {
   id?: string | null
   userName?: string | null
   email?: string | null
}
export type UserWhereUniqueInputInputObject =
   | Extract<keyof UserWhereUniqueInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'userName'; alias?: string }
   | { name: 'email'; alias?: string }

export interface UserWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   name?: string | null
   name_not?: string | null
   name_in?: string[]
   name_not_in?: string[]
   name_lt?: string | null
   name_lte?: string | null
   name_gt?: string | null
   name_gte?: string | null
   name_contains?: string | null
   name_not_contains?: string | null
   name_starts_with?: string | null
   name_not_starts_with?: string | null
   name_ends_with?: string | null
   name_not_ends_with?: string | null
   bio?: string | null
   bio_not?: string | null
   bio_in?: string[]
   bio_not_in?: string[]
   bio_lt?: string | null
   bio_lte?: string | null
   bio_gt?: string | null
   bio_gte?: string | null
   bio_contains?: string | null
   bio_not_contains?: string | null
   bio_starts_with?: string | null
   bio_not_starts_with?: string | null
   bio_ends_with?: string | null
   bio_not_ends_with?: string | null
   userName?: string | null
   userName_not?: string | null
   userName_in?: string[]
   userName_not_in?: string[]
   userName_lt?: string | null
   userName_lte?: string | null
   userName_gt?: string | null
   userName_gte?: string | null
   userName_contains?: string | null
   userName_not_contains?: string | null
   userName_starts_with?: string | null
   userName_not_starts_with?: string | null
   userName_ends_with?: string | null
   userName_not_ends_with?: string | null
   email?: string | null
   email_not?: string | null
   email_in?: string[]
   email_not_in?: string[]
   email_lt?: string | null
   email_lte?: string | null
   email_gt?: string | null
   email_gte?: string | null
   email_contains?: string | null
   email_not_contains?: string | null
   email_starts_with?: string | null
   email_not_starts_with?: string | null
   email_ends_with?: string | null
   email_not_ends_with?: string | null
   password?: string | null
   password_not?: string | null
   password_in?: string[]
   password_not_in?: string[]
   password_lt?: string | null
   password_lte?: string | null
   password_gt?: string | null
   password_gte?: string | null
   password_contains?: string | null
   password_not_contains?: string | null
   password_starts_with?: string | null
   password_not_starts_with?: string | null
   password_ends_with?: string | null
   password_not_ends_with?: string | null
   AND?: UserWhereInput[]
}
export type UserWhereInputInputObject =
   | Extract<keyof UserWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'name_not'; alias?: string }
   | { name: 'name_in'; alias?: string }
   | { name: 'name_not_in'; alias?: string }
   | { name: 'name_lt'; alias?: string }
   | { name: 'name_lte'; alias?: string }
   | { name: 'name_gt'; alias?: string }
   | { name: 'name_gte'; alias?: string }
   | { name: 'name_contains'; alias?: string }
   | { name: 'name_not_contains'; alias?: string }
   | { name: 'name_starts_with'; alias?: string }
   | { name: 'name_not_starts_with'; alias?: string }
   | { name: 'name_ends_with'; alias?: string }
   | { name: 'name_not_ends_with'; alias?: string }
   | { name: 'bio'; alias?: string }
   | { name: 'bio_not'; alias?: string }
   | { name: 'bio_in'; alias?: string }
   | { name: 'bio_not_in'; alias?: string }
   | { name: 'bio_lt'; alias?: string }
   | { name: 'bio_lte'; alias?: string }
   | { name: 'bio_gt'; alias?: string }
   | { name: 'bio_gte'; alias?: string }
   | { name: 'bio_contains'; alias?: string }
   | { name: 'bio_not_contains'; alias?: string }
   | { name: 'bio_starts_with'; alias?: string }
   | { name: 'bio_not_starts_with'; alias?: string }
   | { name: 'bio_ends_with'; alias?: string }
   | { name: 'bio_not_ends_with'; alias?: string }
   | { name: 'userName'; alias?: string }
   | { name: 'userName_not'; alias?: string }
   | { name: 'userName_in'; alias?: string }
   | { name: 'userName_not_in'; alias?: string }
   | { name: 'userName_lt'; alias?: string }
   | { name: 'userName_lte'; alias?: string }
   | { name: 'userName_gt'; alias?: string }
   | { name: 'userName_gte'; alias?: string }
   | { name: 'userName_contains'; alias?: string }
   | { name: 'userName_not_contains'; alias?: string }
   | { name: 'userName_starts_with'; alias?: string }
   | { name: 'userName_not_starts_with'; alias?: string }
   | { name: 'userName_ends_with'; alias?: string }
   | { name: 'userName_not_ends_with'; alias?: string }
   | { name: 'email'; alias?: string }
   | { name: 'email_not'; alias?: string }
   | { name: 'email_in'; alias?: string }
   | { name: 'email_not_in'; alias?: string }
   | { name: 'email_lt'; alias?: string }
   | { name: 'email_lte'; alias?: string }
   | { name: 'email_gt'; alias?: string }
   | { name: 'email_gte'; alias?: string }
   | { name: 'email_contains'; alias?: string }
   | { name: 'email_not_contains'; alias?: string }
   | { name: 'email_starts_with'; alias?: string }
   | { name: 'email_not_starts_with'; alias?: string }
   | { name: 'email_ends_with'; alias?: string }
   | { name: 'email_not_ends_with'; alias?: string }
   | { name: 'password'; alias?: string }
   | { name: 'password_not'; alias?: string }
   | { name: 'password_in'; alias?: string }
   | { name: 'password_not_in'; alias?: string }
   | { name: 'password_lt'; alias?: string }
   | { name: 'password_lte'; alias?: string }
   | { name: 'password_gt'; alias?: string }
   | { name: 'password_gte'; alias?: string }
   | { name: 'password_contains'; alias?: string }
   | { name: 'password_not_contains'; alias?: string }
   | { name: 'password_starts_with'; alias?: string }
   | { name: 'password_not_starts_with'; alias?: string }
   | { name: 'password_ends_with'; alias?: string }
   | { name: 'password_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface ConfigWhereUniqueInput {
   id?: string | null
}
export type ConfigWhereUniqueInputInputObject =
   | Extract<keyof ConfigWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface ConfigWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   timeZone?: string | null
   timeZone_not?: string | null
   timeZone_in?: string[]
   timeZone_not_in?: string[]
   timeZone_lt?: string | null
   timeZone_lte?: string | null
   timeZone_gt?: string | null
   timeZone_gte?: string | null
   timeZone_contains?: string | null
   timeZone_not_contains?: string | null
   timeZone_starts_with?: string | null
   timeZone_not_starts_with?: string | null
   timeZone_ends_with?: string | null
   timeZone_not_ends_with?: string | null
   liveUrl?: string | null
   liveUrl_not?: string | null
   liveUrl_in?: string[]
   liveUrl_not_in?: string[]
   liveUrl_lt?: string | null
   liveUrl_lte?: string | null
   liveUrl_gt?: string | null
   liveUrl_gte?: string | null
   liveUrl_contains?: string | null
   liveUrl_not_contains?: string | null
   liveUrl_starts_with?: string | null
   liveUrl_not_starts_with?: string | null
   liveUrl_ends_with?: string | null
   liveUrl_not_ends_with?: string | null
   liveStatusUrl?: string | null
   liveStatusUrl_not?: string | null
   liveStatusUrl_in?: string[]
   liveStatusUrl_not_in?: string[]
   liveStatusUrl_lt?: string | null
   liveStatusUrl_lte?: string | null
   liveStatusUrl_gt?: string | null
   liveStatusUrl_gte?: string | null
   liveStatusUrl_contains?: string | null
   liveStatusUrl_not_contains?: string | null
   liveStatusUrl_starts_with?: string | null
   liveStatusUrl_not_starts_with?: string | null
   liveStatusUrl_ends_with?: string | null
   liveStatusUrl_not_ends_with?: string | null
   placeholderCover?: string | null
   placeholderCover_not?: string | null
   placeholderCover_in?: string[]
   placeholderCover_not_in?: string[]
   placeholderCover_lt?: string | null
   placeholderCover_lte?: string | null
   placeholderCover_gt?: string | null
   placeholderCover_gte?: string | null
   placeholderCover_contains?: string | null
   placeholderCover_not_contains?: string | null
   placeholderCover_starts_with?: string | null
   placeholderCover_not_starts_with?: string | null
   placeholderCover_ends_with?: string | null
   placeholderCover_not_ends_with?: string | null
   AND?: ConfigWhereInput[]
}
export type ConfigWhereInputInputObject =
   | Extract<keyof ConfigWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'timeZone'; alias?: string }
   | { name: 'timeZone_not'; alias?: string }
   | { name: 'timeZone_in'; alias?: string }
   | { name: 'timeZone_not_in'; alias?: string }
   | { name: 'timeZone_lt'; alias?: string }
   | { name: 'timeZone_lte'; alias?: string }
   | { name: 'timeZone_gt'; alias?: string }
   | { name: 'timeZone_gte'; alias?: string }
   | { name: 'timeZone_contains'; alias?: string }
   | { name: 'timeZone_not_contains'; alias?: string }
   | { name: 'timeZone_starts_with'; alias?: string }
   | { name: 'timeZone_not_starts_with'; alias?: string }
   | { name: 'timeZone_ends_with'; alias?: string }
   | { name: 'timeZone_not_ends_with'; alias?: string }
   | { name: 'liveUrl'; alias?: string }
   | { name: 'liveUrl_not'; alias?: string }
   | { name: 'liveUrl_in'; alias?: string }
   | { name: 'liveUrl_not_in'; alias?: string }
   | { name: 'liveUrl_lt'; alias?: string }
   | { name: 'liveUrl_lte'; alias?: string }
   | { name: 'liveUrl_gt'; alias?: string }
   | { name: 'liveUrl_gte'; alias?: string }
   | { name: 'liveUrl_contains'; alias?: string }
   | { name: 'liveUrl_not_contains'; alias?: string }
   | { name: 'liveUrl_starts_with'; alias?: string }
   | { name: 'liveUrl_not_starts_with'; alias?: string }
   | { name: 'liveUrl_ends_with'; alias?: string }
   | { name: 'liveUrl_not_ends_with'; alias?: string }
   | { name: 'liveStatusUrl'; alias?: string }
   | { name: 'liveStatusUrl_not'; alias?: string }
   | { name: 'liveStatusUrl_in'; alias?: string }
   | { name: 'liveStatusUrl_not_in'; alias?: string }
   | { name: 'liveStatusUrl_lt'; alias?: string }
   | { name: 'liveStatusUrl_lte'; alias?: string }
   | { name: 'liveStatusUrl_gt'; alias?: string }
   | { name: 'liveStatusUrl_gte'; alias?: string }
   | { name: 'liveStatusUrl_contains'; alias?: string }
   | { name: 'liveStatusUrl_not_contains'; alias?: string }
   | { name: 'liveStatusUrl_starts_with'; alias?: string }
   | { name: 'liveStatusUrl_not_starts_with'; alias?: string }
   | { name: 'liveStatusUrl_ends_with'; alias?: string }
   | { name: 'liveStatusUrl_not_ends_with'; alias?: string }
   | { name: 'placeholderCover'; alias?: string }
   | { name: 'placeholderCover_not'; alias?: string }
   | { name: 'placeholderCover_in'; alias?: string }
   | { name: 'placeholderCover_not_in'; alias?: string }
   | { name: 'placeholderCover_lt'; alias?: string }
   | { name: 'placeholderCover_lte'; alias?: string }
   | { name: 'placeholderCover_gt'; alias?: string }
   | { name: 'placeholderCover_gte'; alias?: string }
   | { name: 'placeholderCover_contains'; alias?: string }
   | { name: 'placeholderCover_not_contains'; alias?: string }
   | { name: 'placeholderCover_starts_with'; alias?: string }
   | { name: 'placeholderCover_not_starts_with'; alias?: string }
   | { name: 'placeholderCover_ends_with'; alias?: string }
   | { name: 'placeholderCover_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface SourceWhereUniqueInput {
   id?: string | null
   slug?: string | null
   url?: string | null
}
export type SourceWhereUniqueInputInputObject =
   | Extract<keyof SourceWhereUniqueInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'url'; alias?: string }

export interface ItemWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   slug?: string | null
   slug_not?: string | null
   slug_in?: string[]
   slug_not_in?: string[]
   slug_lt?: string | null
   slug_lte?: string | null
   slug_gt?: string | null
   slug_gte?: string | null
   slug_contains?: string | null
   slug_not_contains?: string | null
   slug_starts_with?: string | null
   slug_not_starts_with?: string | null
   slug_ends_with?: string | null
   slug_not_ends_with?: string | null
   guid?: string | null
   guid_not?: string | null
   guid_in?: string[]
   guid_not_in?: string[]
   guid_lt?: string | null
   guid_lte?: string | null
   guid_gt?: string | null
   guid_gte?: string | null
   guid_contains?: string | null
   guid_not_contains?: string | null
   guid_starts_with?: string | null
   guid_not_starts_with?: string | null
   guid_ends_with?: string | null
   guid_not_ends_with?: string | null
   tags_some?: TagWhereInput | null
   title?: string | null
   title_not?: string | null
   title_in?: string[]
   title_not_in?: string[]
   title_lt?: string | null
   title_lte?: string | null
   title_gt?: string | null
   title_gte?: string | null
   title_contains?: string | null
   title_not_contains?: string | null
   title_starts_with?: string | null
   title_not_starts_with?: string | null
   title_ends_with?: string | null
   title_not_ends_with?: string | null
   description?: string | null
   description_not?: string | null
   description_in?: string[]
   description_not_in?: string[]
   description_lt?: string | null
   description_lte?: string | null
   description_gt?: string | null
   description_gte?: string | null
   description_contains?: string | null
   description_not_contains?: string | null
   description_starts_with?: string | null
   description_not_starts_with?: string | null
   description_ends_with?: string | null
   description_not_ends_with?: string | null
   publishedAt?: string | null
   publishedAt_not?: string | null
   publishedAt_in?: string[]
   publishedAt_not_in?: string[]
   publishedAt_lt?: string | null
   publishedAt_lte?: string | null
   publishedAt_gt?: string | null
   publishedAt_gte?: string | null
   download?: string | null
   download_not?: string | null
   download_in?: string[]
   download_not_in?: string[]
   download_lt?: string | null
   download_lte?: string | null
   download_gt?: string | null
   download_gte?: string | null
   download_contains?: string | null
   download_not_contains?: string | null
   download_starts_with?: string | null
   download_not_starts_with?: string | null
   download_ends_with?: string | null
   download_not_ends_with?: string | null
   url?: string | null
   url_not?: string | null
   url_in?: string[]
   url_not_in?: string[]
   url_lt?: string | null
   url_lte?: string | null
   url_gt?: string | null
   url_gte?: string | null
   url_contains?: string | null
   url_not_contains?: string | null
   url_starts_with?: string | null
   url_not_starts_with?: string | null
   url_ends_with?: string | null
   url_not_ends_with?: string | null
   length?: number | null
   length_not?: number | null
   length_in?: number[]
   length_not_in?: number[]
   length_lt?: number | null
   length_lte?: number | null
   length_gt?: number | null
   length_gte?: number | null
   type?: string | null
   type_not?: string | null
   type_in?: string[]
   type_not_in?: string[]
   type_lt?: string | null
   type_lte?: string | null
   type_gt?: string | null
   type_gte?: string | null
   type_contains?: string | null
   type_not_contains?: string | null
   type_starts_with?: string | null
   type_not_starts_with?: string | null
   type_ends_with?: string | null
   type_not_ends_with?: string | null
   source?: SourceWhereInput | null
   waveform?: WaveWhereInput | null
   AND?: ItemWhereInput[]
}
export type ItemWhereInputInputObject =
   | Extract<keyof ItemWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'slug_not'; alias?: string }
   | { name: 'slug_in'; alias?: string }
   | { name: 'slug_not_in'; alias?: string }
   | { name: 'slug_lt'; alias?: string }
   | { name: 'slug_lte'; alias?: string }
   | { name: 'slug_gt'; alias?: string }
   | { name: 'slug_gte'; alias?: string }
   | { name: 'slug_contains'; alias?: string }
   | { name: 'slug_not_contains'; alias?: string }
   | { name: 'slug_starts_with'; alias?: string }
   | { name: 'slug_not_starts_with'; alias?: string }
   | { name: 'slug_ends_with'; alias?: string }
   | { name: 'slug_not_ends_with'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'guid_not'; alias?: string }
   | { name: 'guid_in'; alias?: string }
   | { name: 'guid_not_in'; alias?: string }
   | { name: 'guid_lt'; alias?: string }
   | { name: 'guid_lte'; alias?: string }
   | { name: 'guid_gt'; alias?: string }
   | { name: 'guid_gte'; alias?: string }
   | { name: 'guid_contains'; alias?: string }
   | { name: 'guid_not_contains'; alias?: string }
   | { name: 'guid_starts_with'; alias?: string }
   | { name: 'guid_not_starts_with'; alias?: string }
   | { name: 'guid_ends_with'; alias?: string }
   | { name: 'guid_not_ends_with'; alias?: string }
   | { name: 'tags_some'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'title_not'; alias?: string }
   | { name: 'title_in'; alias?: string }
   | { name: 'title_not_in'; alias?: string }
   | { name: 'title_lt'; alias?: string }
   | { name: 'title_lte'; alias?: string }
   | { name: 'title_gt'; alias?: string }
   | { name: 'title_gte'; alias?: string }
   | { name: 'title_contains'; alias?: string }
   | { name: 'title_not_contains'; alias?: string }
   | { name: 'title_starts_with'; alias?: string }
   | { name: 'title_not_starts_with'; alias?: string }
   | { name: 'title_ends_with'; alias?: string }
   | { name: 'title_not_ends_with'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'description_not'; alias?: string }
   | { name: 'description_in'; alias?: string }
   | { name: 'description_not_in'; alias?: string }
   | { name: 'description_lt'; alias?: string }
   | { name: 'description_lte'; alias?: string }
   | { name: 'description_gt'; alias?: string }
   | { name: 'description_gte'; alias?: string }
   | { name: 'description_contains'; alias?: string }
   | { name: 'description_not_contains'; alias?: string }
   | { name: 'description_starts_with'; alias?: string }
   | { name: 'description_not_starts_with'; alias?: string }
   | { name: 'description_ends_with'; alias?: string }
   | { name: 'description_not_ends_with'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'publishedAt_not'; alias?: string }
   | { name: 'publishedAt_in'; alias?: string }
   | { name: 'publishedAt_not_in'; alias?: string }
   | { name: 'publishedAt_lt'; alias?: string }
   | { name: 'publishedAt_lte'; alias?: string }
   | { name: 'publishedAt_gt'; alias?: string }
   | { name: 'publishedAt_gte'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'download_not'; alias?: string }
   | { name: 'download_in'; alias?: string }
   | { name: 'download_not_in'; alias?: string }
   | { name: 'download_lt'; alias?: string }
   | { name: 'download_lte'; alias?: string }
   | { name: 'download_gt'; alias?: string }
   | { name: 'download_gte'; alias?: string }
   | { name: 'download_contains'; alias?: string }
   | { name: 'download_not_contains'; alias?: string }
   | { name: 'download_starts_with'; alias?: string }
   | { name: 'download_not_starts_with'; alias?: string }
   | { name: 'download_ends_with'; alias?: string }
   | { name: 'download_not_ends_with'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'url_not'; alias?: string }
   | { name: 'url_in'; alias?: string }
   | { name: 'url_not_in'; alias?: string }
   | { name: 'url_lt'; alias?: string }
   | { name: 'url_lte'; alias?: string }
   | { name: 'url_gt'; alias?: string }
   | { name: 'url_gte'; alias?: string }
   | { name: 'url_contains'; alias?: string }
   | { name: 'url_not_contains'; alias?: string }
   | { name: 'url_starts_with'; alias?: string }
   | { name: 'url_not_starts_with'; alias?: string }
   | { name: 'url_ends_with'; alias?: string }
   | { name: 'url_not_ends_with'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'length_not'; alias?: string }
   | { name: 'length_in'; alias?: string }
   | { name: 'length_not_in'; alias?: string }
   | { name: 'length_lt'; alias?: string }
   | { name: 'length_lte'; alias?: string }
   | { name: 'length_gt'; alias?: string }
   | { name: 'length_gte'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'type_not'; alias?: string }
   | { name: 'type_in'; alias?: string }
   | { name: 'type_not_in'; alias?: string }
   | { name: 'type_lt'; alias?: string }
   | { name: 'type_lte'; alias?: string }
   | { name: 'type_gt'; alias?: string }
   | { name: 'type_gte'; alias?: string }
   | { name: 'type_contains'; alias?: string }
   | { name: 'type_not_contains'; alias?: string }
   | { name: 'type_starts_with'; alias?: string }
   | { name: 'type_not_starts_with'; alias?: string }
   | { name: 'type_ends_with'; alias?: string }
   | { name: 'type_not_ends_with'; alias?: string }
   | { name: 'source'; alias?: string }
   | { name: 'waveform'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TagWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   tag?: number | null
   tag_not?: number | null
   tag_in?: number[]
   tag_not_in?: number[]
   tag_lt?: number | null
   tag_lte?: number | null
   tag_gt?: number | null
   tag_gte?: number | null
   name?: string | null
   name_not?: string | null
   name_in?: string[]
   name_not_in?: string[]
   name_lt?: string | null
   name_lte?: string | null
   name_gt?: string | null
   name_gte?: string | null
   name_contains?: string | null
   name_not_contains?: string | null
   name_starts_with?: string | null
   name_not_starts_with?: string | null
   name_ends_with?: string | null
   name_not_ends_with?: string | null
   text?: string | null
   text_not?: string | null
   text_in?: string[]
   text_not_in?: string[]
   text_lt?: string | null
   text_lte?: string | null
   text_gt?: string | null
   text_gte?: string | null
   text_contains?: string | null
   text_not_contains?: string | null
   text_starts_with?: string | null
   text_not_starts_with?: string | null
   text_ends_with?: string | null
   text_not_ends_with?: string | null
   AND?: TagWhereInput[]
}
export type TagWhereInputInputObject =
   | Extract<keyof TagWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'tag'; alias?: string }
   | { name: 'tag_not'; alias?: string }
   | { name: 'tag_in'; alias?: string }
   | { name: 'tag_not_in'; alias?: string }
   | { name: 'tag_lt'; alias?: string }
   | { name: 'tag_lte'; alias?: string }
   | { name: 'tag_gt'; alias?: string }
   | { name: 'tag_gte'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'name_not'; alias?: string }
   | { name: 'name_in'; alias?: string }
   | { name: 'name_not_in'; alias?: string }
   | { name: 'name_lt'; alias?: string }
   | { name: 'name_lte'; alias?: string }
   | { name: 'name_gt'; alias?: string }
   | { name: 'name_gte'; alias?: string }
   | { name: 'name_contains'; alias?: string }
   | { name: 'name_not_contains'; alias?: string }
   | { name: 'name_starts_with'; alias?: string }
   | { name: 'name_not_starts_with'; alias?: string }
   | { name: 'name_ends_with'; alias?: string }
   | { name: 'name_not_ends_with'; alias?: string }
   | { name: 'text'; alias?: string }
   | { name: 'text_not'; alias?: string }
   | { name: 'text_in'; alias?: string }
   | { name: 'text_not_in'; alias?: string }
   | { name: 'text_lt'; alias?: string }
   | { name: 'text_lte'; alias?: string }
   | { name: 'text_gt'; alias?: string }
   | { name: 'text_gte'; alias?: string }
   | { name: 'text_contains'; alias?: string }
   | { name: 'text_not_contains'; alias?: string }
   | { name: 'text_starts_with'; alias?: string }
   | { name: 'text_not_starts_with'; alias?: string }
   | { name: 'text_ends_with'; alias?: string }
   | { name: 'text_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface SourceWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   slug?: string | null
   slug_not?: string | null
   slug_in?: string[]
   slug_not_in?: string[]
   slug_lt?: string | null
   slug_lte?: string | null
   slug_gt?: string | null
   slug_gte?: string | null
   slug_contains?: string | null
   slug_not_contains?: string | null
   slug_starts_with?: string | null
   slug_not_starts_with?: string | null
   slug_ends_with?: string | null
   slug_not_ends_with?: string | null
   url?: string | null
   url_not?: string | null
   url_in?: string[]
   url_not_in?: string[]
   url_lt?: string | null
   url_lte?: string | null
   url_gt?: string | null
   url_gte?: string | null
   url_contains?: string | null
   url_not_contains?: string | null
   url_starts_with?: string | null
   url_not_starts_with?: string | null
   url_ends_with?: string | null
   url_not_ends_with?: string | null
   type?: prisma.SourceEnum | null
   type_not?: prisma.SourceEnum | null
   type_in?: prisma.SourceEnum[]
   type_not_in?: prisma.SourceEnum[]
   title?: string | null
   title_not?: string | null
   title_in?: string[]
   title_not_in?: string[]
   title_lt?: string | null
   title_lte?: string | null
   title_gt?: string | null
   title_gte?: string | null
   title_contains?: string | null
   title_not_contains?: string | null
   title_starts_with?: string | null
   title_not_starts_with?: string | null
   title_ends_with?: string | null
   title_not_ends_with?: string | null
   description?: string | null
   description_not?: string | null
   description_in?: string[]
   description_not_in?: string[]
   description_lt?: string | null
   description_lte?: string | null
   description_gt?: string | null
   description_gte?: string | null
   description_contains?: string | null
   description_not_contains?: string | null
   description_starts_with?: string | null
   description_not_starts_with?: string | null
   description_ends_with?: string | null
   description_not_ends_with?: string | null
   items_some?: ItemWhereInput | null
   timer?: string | null
   timer_not?: string | null
   timer_in?: string[]
   timer_not_in?: string[]
   timer_lt?: string | null
   timer_lte?: string | null
   timer_gt?: string | null
   timer_gte?: string | null
   timer_contains?: string | null
   timer_not_contains?: string | null
   timer_starts_with?: string | null
   timer_not_starts_with?: string | null
   timer_ends_with?: string | null
   timer_not_ends_with?: string | null
   cron?: CronWhereInput | null
   cover?: string | null
   cover_not?: string | null
   cover_in?: string[]
   cover_not_in?: string[]
   cover_lt?: string | null
   cover_lte?: string | null
   cover_gt?: string | null
   cover_gte?: string | null
   cover_contains?: string | null
   cover_not_contains?: string | null
   cover_starts_with?: string | null
   cover_not_starts_with?: string | null
   cover_ends_with?: string | null
   cover_not_ends_with?: string | null
   AND?: SourceWhereInput[]
}
export type SourceWhereInputInputObject =
   | Extract<keyof SourceWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'slug_not'; alias?: string }
   | { name: 'slug_in'; alias?: string }
   | { name: 'slug_not_in'; alias?: string }
   | { name: 'slug_lt'; alias?: string }
   | { name: 'slug_lte'; alias?: string }
   | { name: 'slug_gt'; alias?: string }
   | { name: 'slug_gte'; alias?: string }
   | { name: 'slug_contains'; alias?: string }
   | { name: 'slug_not_contains'; alias?: string }
   | { name: 'slug_starts_with'; alias?: string }
   | { name: 'slug_not_starts_with'; alias?: string }
   | { name: 'slug_ends_with'; alias?: string }
   | { name: 'slug_not_ends_with'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'url_not'; alias?: string }
   | { name: 'url_in'; alias?: string }
   | { name: 'url_not_in'; alias?: string }
   | { name: 'url_lt'; alias?: string }
   | { name: 'url_lte'; alias?: string }
   | { name: 'url_gt'; alias?: string }
   | { name: 'url_gte'; alias?: string }
   | { name: 'url_contains'; alias?: string }
   | { name: 'url_not_contains'; alias?: string }
   | { name: 'url_starts_with'; alias?: string }
   | { name: 'url_not_starts_with'; alias?: string }
   | { name: 'url_ends_with'; alias?: string }
   | { name: 'url_not_ends_with'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'type_not'; alias?: string }
   | { name: 'type_in'; alias?: string }
   | { name: 'type_not_in'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'title_not'; alias?: string }
   | { name: 'title_in'; alias?: string }
   | { name: 'title_not_in'; alias?: string }
   | { name: 'title_lt'; alias?: string }
   | { name: 'title_lte'; alias?: string }
   | { name: 'title_gt'; alias?: string }
   | { name: 'title_gte'; alias?: string }
   | { name: 'title_contains'; alias?: string }
   | { name: 'title_not_contains'; alias?: string }
   | { name: 'title_starts_with'; alias?: string }
   | { name: 'title_not_starts_with'; alias?: string }
   | { name: 'title_ends_with'; alias?: string }
   | { name: 'title_not_ends_with'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'description_not'; alias?: string }
   | { name: 'description_in'; alias?: string }
   | { name: 'description_not_in'; alias?: string }
   | { name: 'description_lt'; alias?: string }
   | { name: 'description_lte'; alias?: string }
   | { name: 'description_gt'; alias?: string }
   | { name: 'description_gte'; alias?: string }
   | { name: 'description_contains'; alias?: string }
   | { name: 'description_not_contains'; alias?: string }
   | { name: 'description_starts_with'; alias?: string }
   | { name: 'description_not_starts_with'; alias?: string }
   | { name: 'description_ends_with'; alias?: string }
   | { name: 'description_not_ends_with'; alias?: string }
   | { name: 'items_some'; alias?: string }
   | { name: 'timer'; alias?: string }
   | { name: 'timer_not'; alias?: string }
   | { name: 'timer_in'; alias?: string }
   | { name: 'timer_not_in'; alias?: string }
   | { name: 'timer_lt'; alias?: string }
   | { name: 'timer_lte'; alias?: string }
   | { name: 'timer_gt'; alias?: string }
   | { name: 'timer_gte'; alias?: string }
   | { name: 'timer_contains'; alias?: string }
   | { name: 'timer_not_contains'; alias?: string }
   | { name: 'timer_starts_with'; alias?: string }
   | { name: 'timer_not_starts_with'; alias?: string }
   | { name: 'timer_ends_with'; alias?: string }
   | { name: 'timer_not_ends_with'; alias?: string }
   | { name: 'cron'; alias?: string }
   | { name: 'cover'; alias?: string }
   | { name: 'cover_not'; alias?: string }
   | { name: 'cover_in'; alias?: string }
   | { name: 'cover_not_in'; alias?: string }
   | { name: 'cover_lt'; alias?: string }
   | { name: 'cover_lte'; alias?: string }
   | { name: 'cover_gt'; alias?: string }
   | { name: 'cover_gte'; alias?: string }
   | { name: 'cover_contains'; alias?: string }
   | { name: 'cover_not_contains'; alias?: string }
   | { name: 'cover_starts_with'; alias?: string }
   | { name: 'cover_not_starts_with'; alias?: string }
   | { name: 'cover_ends_with'; alias?: string }
   | { name: 'cover_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface CronWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   pid?: number | null
   pid_not?: number | null
   pid_in?: number[]
   pid_not_in?: number[]
   pid_lt?: number | null
   pid_lte?: number | null
   pid_gt?: number | null
   pid_gte?: number | null
   health?: boolean | null
   health_not?: boolean | null
   status?: prisma.CronEnum | null
   status_not?: prisma.CronEnum | null
   status_in?: prisma.CronEnum[]
   status_not_in?: prisma.CronEnum[]
   lastMessage?: string | null
   lastMessage_not?: string | null
   lastMessage_in?: string[]
   lastMessage_not_in?: string[]
   lastMessage_lt?: string | null
   lastMessage_lte?: string | null
   lastMessage_gt?: string | null
   lastMessage_gte?: string | null
   lastMessage_contains?: string | null
   lastMessage_not_contains?: string | null
   lastMessage_starts_with?: string | null
   lastMessage_not_starts_with?: string | null
   lastMessage_ends_with?: string | null
   lastMessage_not_ends_with?: string | null
   AND?: CronWhereInput[]
}
export type CronWhereInputInputObject =
   | Extract<keyof CronWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'pid'; alias?: string }
   | { name: 'pid_not'; alias?: string }
   | { name: 'pid_in'; alias?: string }
   | { name: 'pid_not_in'; alias?: string }
   | { name: 'pid_lt'; alias?: string }
   | { name: 'pid_lte'; alias?: string }
   | { name: 'pid_gt'; alias?: string }
   | { name: 'pid_gte'; alias?: string }
   | { name: 'health'; alias?: string }
   | { name: 'health_not'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'status_not'; alias?: string }
   | { name: 'status_in'; alias?: string }
   | { name: 'status_not_in'; alias?: string }
   | { name: 'lastMessage'; alias?: string }
   | { name: 'lastMessage_not'; alias?: string }
   | { name: 'lastMessage_in'; alias?: string }
   | { name: 'lastMessage_not_in'; alias?: string }
   | { name: 'lastMessage_lt'; alias?: string }
   | { name: 'lastMessage_lte'; alias?: string }
   | { name: 'lastMessage_gt'; alias?: string }
   | { name: 'lastMessage_gte'; alias?: string }
   | { name: 'lastMessage_contains'; alias?: string }
   | { name: 'lastMessage_not_contains'; alias?: string }
   | { name: 'lastMessage_starts_with'; alias?: string }
   | { name: 'lastMessage_not_starts_with'; alias?: string }
   | { name: 'lastMessage_ends_with'; alias?: string }
   | { name: 'lastMessage_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface WaveWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   url?: string | null
   url_not?: string | null
   url_in?: string[]
   url_not_in?: string[]
   url_lt?: string | null
   url_lte?: string | null
   url_gt?: string | null
   url_gte?: string | null
   url_contains?: string | null
   url_not_contains?: string | null
   url_starts_with?: string | null
   url_not_starts_with?: string | null
   url_ends_with?: string | null
   url_not_ends_with?: string | null
   AND?: WaveWhereInput[]
}
export type WaveWhereInputInputObject =
   | Extract<keyof WaveWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'url_not'; alias?: string }
   | { name: 'url_in'; alias?: string }
   | { name: 'url_not_in'; alias?: string }
   | { name: 'url_lt'; alias?: string }
   | { name: 'url_lte'; alias?: string }
   | { name: 'url_gt'; alias?: string }
   | { name: 'url_gte'; alias?: string }
   | { name: 'url_contains'; alias?: string }
   | { name: 'url_not_contains'; alias?: string }
   | { name: 'url_starts_with'; alias?: string }
   | { name: 'url_not_starts_with'; alias?: string }
   | { name: 'url_ends_with'; alias?: string }
   | { name: 'url_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TagWhereUniqueInput {
   id?: string | null
   tag?: number | null
}
export type TagWhereUniqueInputInputObject =
   | Extract<keyof TagWhereUniqueInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'tag'; alias?: string }

export interface ItemWhereUniqueInput {
   id?: string | null
   slug?: string | null
   guid?: string | null
}
export type ItemWhereUniqueInputInputObject =
   | Extract<keyof ItemWhereUniqueInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }

export interface WaveWhereUniqueInput {
   id?: string | null
   url?: string | null
}
export type WaveWhereUniqueInputInputObject =
   | Extract<keyof WaveWhereUniqueInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'url'; alias?: string }

export interface CronWhereUniqueInput {
   id?: string | null
   pid?: number | null
}
export type CronWhereUniqueInputInputObject =
   | Extract<keyof CronWhereUniqueInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'pid'; alias?: string }

export interface UserCreateInput {
   id?: string | null
   name?: string
   bio?: string | null
   userName?: string
   email?: string
   password?: string
}
export type UserCreateInputInputObject =
   | Extract<keyof UserCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'bio'; alias?: string }
   | { name: 'userName'; alias?: string }
   | { name: 'email'; alias?: string }
   | { name: 'password'; alias?: string }

export interface UserUpdateInput {
   name?: string | null
   bio?: string | null
   userName?: string | null
   email?: string | null
   password?: string | null
}
export type UserUpdateInputInputObject =
   | Extract<keyof UserUpdateInput, string>
   | { name: 'name'; alias?: string }
   | { name: 'bio'; alias?: string }
   | { name: 'userName'; alias?: string }
   | { name: 'email'; alias?: string }
   | { name: 'password'; alias?: string }

export interface UserUpdateManyMutationInput {
   name?: string | null
   bio?: string | null
   userName?: string | null
   email?: string | null
   password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
   | Extract<keyof UserUpdateManyMutationInput, string>
   | { name: 'name'; alias?: string }
   | { name: 'bio'; alias?: string }
   | { name: 'userName'; alias?: string }
   | { name: 'email'; alias?: string }
   | { name: 'password'; alias?: string }

export interface ConfigCreateInput {
   id?: string | null
   timeZone?: string
   liveUrl?: string
   liveStatusUrl?: string
   placeholderCover?: string
}
export type ConfigCreateInputInputObject =
   | Extract<keyof ConfigCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'timeZone'; alias?: string }
   | { name: 'liveUrl'; alias?: string }
   | { name: 'liveStatusUrl'; alias?: string }
   | { name: 'placeholderCover'; alias?: string }

export interface ConfigUpdateInput {
   timeZone?: string | null
   liveUrl?: string | null
   liveStatusUrl?: string | null
   placeholderCover?: string | null
}
export type ConfigUpdateInputInputObject =
   | Extract<keyof ConfigUpdateInput, string>
   | { name: 'timeZone'; alias?: string }
   | { name: 'liveUrl'; alias?: string }
   | { name: 'liveStatusUrl'; alias?: string }
   | { name: 'placeholderCover'; alias?: string }

export interface ConfigUpdateManyMutationInput {
   timeZone?: string | null
   liveUrl?: string | null
   liveStatusUrl?: string | null
   placeholderCover?: string | null
}
export type ConfigUpdateManyMutationInputInputObject =
   | Extract<keyof ConfigUpdateManyMutationInput, string>
   | { name: 'timeZone'; alias?: string }
   | { name: 'liveUrl'; alias?: string }
   | { name: 'liveStatusUrl'; alias?: string }
   | { name: 'placeholderCover'; alias?: string }

export interface SourceCreateInput {
   id?: string | null
   slug?: string | null
   url?: string
   type?: prisma.SourceEnum | null
   title?: string | null
   description?: string | null
   items?: ItemCreateManyWithoutSourceInput | null
   timer?: string | null
   cron?: CronCreateOneInput | null
   cover?: string | null
}
export type SourceCreateInputInputObject =
   | Extract<keyof SourceCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'items'; alias?: string }
   | { name: 'timer'; alias?: string }
   | { name: 'cron'; alias?: string }
   | { name: 'cover'; alias?: string }

export interface ItemCreateManyWithoutSourceInput {
   create?: ItemCreateWithoutSourceInput[]
   connect?: ItemWhereUniqueInput[]
}
export type ItemCreateManyWithoutSourceInputInputObject =
   | Extract<keyof ItemCreateManyWithoutSourceInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface ItemCreateWithoutSourceInput {
   id?: string | null
   slug?: string
   guid?: string
   tags?: TagCreateManyInput | null
   title?: string | null
   description?: string | null
   publishedAt?: string | null
   download?: string | null
   url?: string | null
   length?: number | null
   type?: string | null
   waveform?: WaveCreateOneInput | null
}
export type ItemCreateWithoutSourceInputInputObject =
   | Extract<keyof ItemCreateWithoutSourceInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'tags'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'waveform'; alias?: string }

export interface TagCreateManyInput {
   create?: TagCreateInput[]
   connect?: TagWhereUniqueInput[]
}
export type TagCreateManyInputInputObject =
   | Extract<keyof TagCreateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TagCreateInput {
   id?: string | null
   tag?: number
   name?: string
   text?: string
}
export type TagCreateInputInputObject =
   | Extract<keyof TagCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'tag'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'text'; alias?: string }

export interface WaveCreateOneInput {
   create?: WaveCreateInput | null
   connect?: WaveWhereUniqueInput | null
}
export type WaveCreateOneInputInputObject =
   | Extract<keyof WaveCreateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface WaveCreateInput {
   id?: string | null
   url?: string
   wave?: WaveCreatewaveInput | null
}
export type WaveCreateInputInputObject =
   | Extract<keyof WaveCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'wave'; alias?: string }

export interface WaveCreatewaveInput {
   set?: number[]
}
export type WaveCreatewaveInputInputObject =
   | Extract<keyof WaveCreatewaveInput, string>
   | { name: 'set'; alias?: string }

export interface CronCreateOneInput {
   create?: CronCreateInput | null
   connect?: CronWhereUniqueInput | null
}
export type CronCreateOneInputInputObject =
   | Extract<keyof CronCreateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface CronCreateInput {
   id?: string | null
   pid?: number
   health?: boolean | null
   status?: prisma.CronEnum
   lastMessage?: string | null
}
export type CronCreateInputInputObject =
   | Extract<keyof CronCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'pid'; alias?: string }
   | { name: 'health'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'lastMessage'; alias?: string }

export interface SourceUpdateInput {
   slug?: string | null
   url?: string | null
   type?: prisma.SourceEnum | null
   title?: string | null
   description?: string | null
   items?: ItemUpdateManyWithoutSourceInput | null
   timer?: string | null
   cron?: CronUpdateOneInput | null
   cover?: string | null
}
export type SourceUpdateInputInputObject =
   | Extract<keyof SourceUpdateInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'items'; alias?: string }
   | { name: 'timer'; alias?: string }
   | { name: 'cron'; alias?: string }
   | { name: 'cover'; alias?: string }

export interface ItemUpdateManyWithoutSourceInput {
   create?: ItemCreateWithoutSourceInput[]
   delete?: ItemWhereUniqueInput[]
   connect?: ItemWhereUniqueInput[]
   set?: ItemWhereUniqueInput[]
   disconnect?: ItemWhereUniqueInput[]
   update?: ItemUpdateWithWhereUniqueWithoutSourceInput[]
   upsert?: ItemUpsertWithWhereUniqueWithoutSourceInput[]
   deleteMany?: ItemScalarWhereInput[]
   updateMany?: ItemUpdateManyWithWhereNestedInput[]
}
export type ItemUpdateManyWithoutSourceInputInputObject =
   | Extract<keyof ItemUpdateManyWithoutSourceInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface ItemUpdateWithWhereUniqueWithoutSourceInput {
   where?: ItemWhereUniqueInput
   data?: ItemUpdateWithoutSourceDataInput
}
export type ItemUpdateWithWhereUniqueWithoutSourceInputInputObject =
   | Extract<keyof ItemUpdateWithWhereUniqueWithoutSourceInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface ItemUpdateWithoutSourceDataInput {
   slug?: string | null
   guid?: string | null
   tags?: TagUpdateManyInput | null
   title?: string | null
   description?: string | null
   publishedAt?: string | null
   download?: string | null
   url?: string | null
   length?: number | null
   type?: string | null
   waveform?: WaveUpdateOneInput | null
}
export type ItemUpdateWithoutSourceDataInputInputObject =
   | Extract<keyof ItemUpdateWithoutSourceDataInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'tags'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'waveform'; alias?: string }

export interface TagUpdateManyInput {
   create?: TagCreateInput[]
   update?: TagUpdateWithWhereUniqueNestedInput[]
   upsert?: TagUpsertWithWhereUniqueNestedInput[]
   delete?: TagWhereUniqueInput[]
   connect?: TagWhereUniqueInput[]
   set?: TagWhereUniqueInput[]
   disconnect?: TagWhereUniqueInput[]
   deleteMany?: TagScalarWhereInput[]
   updateMany?: TagUpdateManyWithWhereNestedInput[]
}
export type TagUpdateManyInputInputObject =
   | Extract<keyof TagUpdateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface TagUpdateWithWhereUniqueNestedInput {
   where?: TagWhereUniqueInput
   data?: TagUpdateDataInput
}
export type TagUpdateWithWhereUniqueNestedInputInputObject =
   | Extract<keyof TagUpdateWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface TagUpdateDataInput {
   tag?: number | null
   name?: string | null
   text?: string | null
}
export type TagUpdateDataInputInputObject =
   | Extract<keyof TagUpdateDataInput, string>
   | { name: 'tag'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'text'; alias?: string }

export interface TagUpsertWithWhereUniqueNestedInput {
   where?: TagWhereUniqueInput
   update?: TagUpdateDataInput
   create?: TagCreateInput
}
export type TagUpsertWithWhereUniqueNestedInputInputObject =
   | Extract<keyof TagUpsertWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TagScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   tag?: number | null
   tag_not?: number | null
   tag_in?: number[]
   tag_not_in?: number[]
   tag_lt?: number | null
   tag_lte?: number | null
   tag_gt?: number | null
   tag_gte?: number | null
   name?: string | null
   name_not?: string | null
   name_in?: string[]
   name_not_in?: string[]
   name_lt?: string | null
   name_lte?: string | null
   name_gt?: string | null
   name_gte?: string | null
   name_contains?: string | null
   name_not_contains?: string | null
   name_starts_with?: string | null
   name_not_starts_with?: string | null
   name_ends_with?: string | null
   name_not_ends_with?: string | null
   text?: string | null
   text_not?: string | null
   text_in?: string[]
   text_not_in?: string[]
   text_lt?: string | null
   text_lte?: string | null
   text_gt?: string | null
   text_gte?: string | null
   text_contains?: string | null
   text_not_contains?: string | null
   text_starts_with?: string | null
   text_not_starts_with?: string | null
   text_ends_with?: string | null
   text_not_ends_with?: string | null
   AND?: TagScalarWhereInput[]
   OR?: TagScalarWhereInput[]
   NOT?: TagScalarWhereInput[]
}
export type TagScalarWhereInputInputObject =
   | Extract<keyof TagScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'tag'; alias?: string }
   | { name: 'tag_not'; alias?: string }
   | { name: 'tag_in'; alias?: string }
   | { name: 'tag_not_in'; alias?: string }
   | { name: 'tag_lt'; alias?: string }
   | { name: 'tag_lte'; alias?: string }
   | { name: 'tag_gt'; alias?: string }
   | { name: 'tag_gte'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'name_not'; alias?: string }
   | { name: 'name_in'; alias?: string }
   | { name: 'name_not_in'; alias?: string }
   | { name: 'name_lt'; alias?: string }
   | { name: 'name_lte'; alias?: string }
   | { name: 'name_gt'; alias?: string }
   | { name: 'name_gte'; alias?: string }
   | { name: 'name_contains'; alias?: string }
   | { name: 'name_not_contains'; alias?: string }
   | { name: 'name_starts_with'; alias?: string }
   | { name: 'name_not_starts_with'; alias?: string }
   | { name: 'name_ends_with'; alias?: string }
   | { name: 'name_not_ends_with'; alias?: string }
   | { name: 'text'; alias?: string }
   | { name: 'text_not'; alias?: string }
   | { name: 'text_in'; alias?: string }
   | { name: 'text_not_in'; alias?: string }
   | { name: 'text_lt'; alias?: string }
   | { name: 'text_lte'; alias?: string }
   | { name: 'text_gt'; alias?: string }
   | { name: 'text_gte'; alias?: string }
   | { name: 'text_contains'; alias?: string }
   | { name: 'text_not_contains'; alias?: string }
   | { name: 'text_starts_with'; alias?: string }
   | { name: 'text_not_starts_with'; alias?: string }
   | { name: 'text_ends_with'; alias?: string }
   | { name: 'text_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface TagUpdateManyWithWhereNestedInput {
   where?: TagScalarWhereInput
   data?: TagUpdateManyDataInput
}
export type TagUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof TagUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface TagUpdateManyDataInput {
   tag?: number | null
   name?: string | null
   text?: string | null
}
export type TagUpdateManyDataInputInputObject =
   | Extract<keyof TagUpdateManyDataInput, string>
   | { name: 'tag'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'text'; alias?: string }

export interface WaveUpdateOneInput {
   create?: WaveCreateInput | null
   update?: WaveUpdateDataInput | null
   upsert?: WaveUpsertNestedInput | null
   delete?: boolean | null
   disconnect?: boolean | null
   connect?: WaveWhereUniqueInput | null
}
export type WaveUpdateOneInputInputObject =
   | Extract<keyof WaveUpdateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface WaveUpdateDataInput {
   url?: string | null
   wave?: WaveUpdatewaveInput | null
}
export type WaveUpdateDataInputInputObject =
   | Extract<keyof WaveUpdateDataInput, string>
   | { name: 'url'; alias?: string }
   | { name: 'wave'; alias?: string }

export interface WaveUpdatewaveInput {
   set?: number[]
}
export type WaveUpdatewaveInputInputObject =
   | Extract<keyof WaveUpdatewaveInput, string>
   | { name: 'set'; alias?: string }

export interface WaveUpsertNestedInput {
   update?: WaveUpdateDataInput
   create?: WaveCreateInput
}
export type WaveUpsertNestedInputInputObject =
   | Extract<keyof WaveUpsertNestedInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface ItemUpsertWithWhereUniqueWithoutSourceInput {
   where?: ItemWhereUniqueInput
   update?: ItemUpdateWithoutSourceDataInput
   create?: ItemCreateWithoutSourceInput
}
export type ItemUpsertWithWhereUniqueWithoutSourceInputInputObject =
   | Extract<keyof ItemUpsertWithWhereUniqueWithoutSourceInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface ItemScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   createdAt?: string | null
   createdAt_not?: string | null
   createdAt_in?: string[]
   createdAt_not_in?: string[]
   createdAt_lt?: string | null
   createdAt_lte?: string | null
   createdAt_gt?: string | null
   createdAt_gte?: string | null
   updatedAt?: string | null
   updatedAt_not?: string | null
   updatedAt_in?: string[]
   updatedAt_not_in?: string[]
   updatedAt_lt?: string | null
   updatedAt_lte?: string | null
   updatedAt_gt?: string | null
   updatedAt_gte?: string | null
   slug?: string | null
   slug_not?: string | null
   slug_in?: string[]
   slug_not_in?: string[]
   slug_lt?: string | null
   slug_lte?: string | null
   slug_gt?: string | null
   slug_gte?: string | null
   slug_contains?: string | null
   slug_not_contains?: string | null
   slug_starts_with?: string | null
   slug_not_starts_with?: string | null
   slug_ends_with?: string | null
   slug_not_ends_with?: string | null
   guid?: string | null
   guid_not?: string | null
   guid_in?: string[]
   guid_not_in?: string[]
   guid_lt?: string | null
   guid_lte?: string | null
   guid_gt?: string | null
   guid_gte?: string | null
   guid_contains?: string | null
   guid_not_contains?: string | null
   guid_starts_with?: string | null
   guid_not_starts_with?: string | null
   guid_ends_with?: string | null
   guid_not_ends_with?: string | null
   title?: string | null
   title_not?: string | null
   title_in?: string[]
   title_not_in?: string[]
   title_lt?: string | null
   title_lte?: string | null
   title_gt?: string | null
   title_gte?: string | null
   title_contains?: string | null
   title_not_contains?: string | null
   title_starts_with?: string | null
   title_not_starts_with?: string | null
   title_ends_with?: string | null
   title_not_ends_with?: string | null
   description?: string | null
   description_not?: string | null
   description_in?: string[]
   description_not_in?: string[]
   description_lt?: string | null
   description_lte?: string | null
   description_gt?: string | null
   description_gte?: string | null
   description_contains?: string | null
   description_not_contains?: string | null
   description_starts_with?: string | null
   description_not_starts_with?: string | null
   description_ends_with?: string | null
   description_not_ends_with?: string | null
   publishedAt?: string | null
   publishedAt_not?: string | null
   publishedAt_in?: string[]
   publishedAt_not_in?: string[]
   publishedAt_lt?: string | null
   publishedAt_lte?: string | null
   publishedAt_gt?: string | null
   publishedAt_gte?: string | null
   download?: string | null
   download_not?: string | null
   download_in?: string[]
   download_not_in?: string[]
   download_lt?: string | null
   download_lte?: string | null
   download_gt?: string | null
   download_gte?: string | null
   download_contains?: string | null
   download_not_contains?: string | null
   download_starts_with?: string | null
   download_not_starts_with?: string | null
   download_ends_with?: string | null
   download_not_ends_with?: string | null
   url?: string | null
   url_not?: string | null
   url_in?: string[]
   url_not_in?: string[]
   url_lt?: string | null
   url_lte?: string | null
   url_gt?: string | null
   url_gte?: string | null
   url_contains?: string | null
   url_not_contains?: string | null
   url_starts_with?: string | null
   url_not_starts_with?: string | null
   url_ends_with?: string | null
   url_not_ends_with?: string | null
   length?: number | null
   length_not?: number | null
   length_in?: number[]
   length_not_in?: number[]
   length_lt?: number | null
   length_lte?: number | null
   length_gt?: number | null
   length_gte?: number | null
   type?: string | null
   type_not?: string | null
   type_in?: string[]
   type_not_in?: string[]
   type_lt?: string | null
   type_lte?: string | null
   type_gt?: string | null
   type_gte?: string | null
   type_contains?: string | null
   type_not_contains?: string | null
   type_starts_with?: string | null
   type_not_starts_with?: string | null
   type_ends_with?: string | null
   type_not_ends_with?: string | null
   AND?: ItemScalarWhereInput[]
   OR?: ItemScalarWhereInput[]
   NOT?: ItemScalarWhereInput[]
}
export type ItemScalarWhereInputInputObject =
   | Extract<keyof ItemScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'createdAt'; alias?: string }
   | { name: 'createdAt_not'; alias?: string }
   | { name: 'createdAt_in'; alias?: string }
   | { name: 'createdAt_not_in'; alias?: string }
   | { name: 'createdAt_lt'; alias?: string }
   | { name: 'createdAt_lte'; alias?: string }
   | { name: 'createdAt_gt'; alias?: string }
   | { name: 'createdAt_gte'; alias?: string }
   | { name: 'updatedAt'; alias?: string }
   | { name: 'updatedAt_not'; alias?: string }
   | { name: 'updatedAt_in'; alias?: string }
   | { name: 'updatedAt_not_in'; alias?: string }
   | { name: 'updatedAt_lt'; alias?: string }
   | { name: 'updatedAt_lte'; alias?: string }
   | { name: 'updatedAt_gt'; alias?: string }
   | { name: 'updatedAt_gte'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'slug_not'; alias?: string }
   | { name: 'slug_in'; alias?: string }
   | { name: 'slug_not_in'; alias?: string }
   | { name: 'slug_lt'; alias?: string }
   | { name: 'slug_lte'; alias?: string }
   | { name: 'slug_gt'; alias?: string }
   | { name: 'slug_gte'; alias?: string }
   | { name: 'slug_contains'; alias?: string }
   | { name: 'slug_not_contains'; alias?: string }
   | { name: 'slug_starts_with'; alias?: string }
   | { name: 'slug_not_starts_with'; alias?: string }
   | { name: 'slug_ends_with'; alias?: string }
   | { name: 'slug_not_ends_with'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'guid_not'; alias?: string }
   | { name: 'guid_in'; alias?: string }
   | { name: 'guid_not_in'; alias?: string }
   | { name: 'guid_lt'; alias?: string }
   | { name: 'guid_lte'; alias?: string }
   | { name: 'guid_gt'; alias?: string }
   | { name: 'guid_gte'; alias?: string }
   | { name: 'guid_contains'; alias?: string }
   | { name: 'guid_not_contains'; alias?: string }
   | { name: 'guid_starts_with'; alias?: string }
   | { name: 'guid_not_starts_with'; alias?: string }
   | { name: 'guid_ends_with'; alias?: string }
   | { name: 'guid_not_ends_with'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'title_not'; alias?: string }
   | { name: 'title_in'; alias?: string }
   | { name: 'title_not_in'; alias?: string }
   | { name: 'title_lt'; alias?: string }
   | { name: 'title_lte'; alias?: string }
   | { name: 'title_gt'; alias?: string }
   | { name: 'title_gte'; alias?: string }
   | { name: 'title_contains'; alias?: string }
   | { name: 'title_not_contains'; alias?: string }
   | { name: 'title_starts_with'; alias?: string }
   | { name: 'title_not_starts_with'; alias?: string }
   | { name: 'title_ends_with'; alias?: string }
   | { name: 'title_not_ends_with'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'description_not'; alias?: string }
   | { name: 'description_in'; alias?: string }
   | { name: 'description_not_in'; alias?: string }
   | { name: 'description_lt'; alias?: string }
   | { name: 'description_lte'; alias?: string }
   | { name: 'description_gt'; alias?: string }
   | { name: 'description_gte'; alias?: string }
   | { name: 'description_contains'; alias?: string }
   | { name: 'description_not_contains'; alias?: string }
   | { name: 'description_starts_with'; alias?: string }
   | { name: 'description_not_starts_with'; alias?: string }
   | { name: 'description_ends_with'; alias?: string }
   | { name: 'description_not_ends_with'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'publishedAt_not'; alias?: string }
   | { name: 'publishedAt_in'; alias?: string }
   | { name: 'publishedAt_not_in'; alias?: string }
   | { name: 'publishedAt_lt'; alias?: string }
   | { name: 'publishedAt_lte'; alias?: string }
   | { name: 'publishedAt_gt'; alias?: string }
   | { name: 'publishedAt_gte'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'download_not'; alias?: string }
   | { name: 'download_in'; alias?: string }
   | { name: 'download_not_in'; alias?: string }
   | { name: 'download_lt'; alias?: string }
   | { name: 'download_lte'; alias?: string }
   | { name: 'download_gt'; alias?: string }
   | { name: 'download_gte'; alias?: string }
   | { name: 'download_contains'; alias?: string }
   | { name: 'download_not_contains'; alias?: string }
   | { name: 'download_starts_with'; alias?: string }
   | { name: 'download_not_starts_with'; alias?: string }
   | { name: 'download_ends_with'; alias?: string }
   | { name: 'download_not_ends_with'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'url_not'; alias?: string }
   | { name: 'url_in'; alias?: string }
   | { name: 'url_not_in'; alias?: string }
   | { name: 'url_lt'; alias?: string }
   | { name: 'url_lte'; alias?: string }
   | { name: 'url_gt'; alias?: string }
   | { name: 'url_gte'; alias?: string }
   | { name: 'url_contains'; alias?: string }
   | { name: 'url_not_contains'; alias?: string }
   | { name: 'url_starts_with'; alias?: string }
   | { name: 'url_not_starts_with'; alias?: string }
   | { name: 'url_ends_with'; alias?: string }
   | { name: 'url_not_ends_with'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'length_not'; alias?: string }
   | { name: 'length_in'; alias?: string }
   | { name: 'length_not_in'; alias?: string }
   | { name: 'length_lt'; alias?: string }
   | { name: 'length_lte'; alias?: string }
   | { name: 'length_gt'; alias?: string }
   | { name: 'length_gte'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'type_not'; alias?: string }
   | { name: 'type_in'; alias?: string }
   | { name: 'type_not_in'; alias?: string }
   | { name: 'type_lt'; alias?: string }
   | { name: 'type_lte'; alias?: string }
   | { name: 'type_gt'; alias?: string }
   | { name: 'type_gte'; alias?: string }
   | { name: 'type_contains'; alias?: string }
   | { name: 'type_not_contains'; alias?: string }
   | { name: 'type_starts_with'; alias?: string }
   | { name: 'type_not_starts_with'; alias?: string }
   | { name: 'type_ends_with'; alias?: string }
   | { name: 'type_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface ItemUpdateManyWithWhereNestedInput {
   where?: ItemScalarWhereInput
   data?: ItemUpdateManyDataInput
}
export type ItemUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof ItemUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface ItemUpdateManyDataInput {
   slug?: string | null
   guid?: string | null
   title?: string | null
   description?: string | null
   publishedAt?: string | null
   download?: string | null
   url?: string | null
   length?: number | null
   type?: string | null
}
export type ItemUpdateManyDataInputInputObject =
   | Extract<keyof ItemUpdateManyDataInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'type'; alias?: string }

export interface CronUpdateOneInput {
   create?: CronCreateInput | null
   update?: CronUpdateDataInput | null
   upsert?: CronUpsertNestedInput | null
   delete?: boolean | null
   disconnect?: boolean | null
   connect?: CronWhereUniqueInput | null
}
export type CronUpdateOneInputInputObject =
   | Extract<keyof CronUpdateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface CronUpdateDataInput {
   pid?: number | null
   health?: boolean | null
   status?: prisma.CronEnum | null
   lastMessage?: string | null
}
export type CronUpdateDataInputInputObject =
   | Extract<keyof CronUpdateDataInput, string>
   | { name: 'pid'; alias?: string }
   | { name: 'health'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'lastMessage'; alias?: string }

export interface CronUpsertNestedInput {
   update?: CronUpdateDataInput
   create?: CronCreateInput
}
export type CronUpsertNestedInputInputObject =
   | Extract<keyof CronUpsertNestedInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface SourceUpdateManyMutationInput {
   slug?: string | null
   url?: string | null
   type?: prisma.SourceEnum | null
   title?: string | null
   description?: string | null
   timer?: string | null
   cover?: string | null
}
export type SourceUpdateManyMutationInputInputObject =
   | Extract<keyof SourceUpdateManyMutationInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'timer'; alias?: string }
   | { name: 'cover'; alias?: string }

export interface TagUpdateInput {
   tag?: number | null
   name?: string | null
   text?: string | null
}
export type TagUpdateInputInputObject =
   | Extract<keyof TagUpdateInput, string>
   | { name: 'tag'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'text'; alias?: string }

export interface TagUpdateManyMutationInput {
   tag?: number | null
   name?: string | null
   text?: string | null
}
export type TagUpdateManyMutationInputInputObject =
   | Extract<keyof TagUpdateManyMutationInput, string>
   | { name: 'tag'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'text'; alias?: string }

export interface ItemCreateInput {
   id?: string | null
   slug?: string
   guid?: string
   tags?: TagCreateManyInput | null
   title?: string | null
   description?: string | null
   publishedAt?: string | null
   download?: string | null
   url?: string | null
   length?: number | null
   type?: string | null
   source?: SourceCreateOneWithoutItemsInput | null
   waveform?: WaveCreateOneInput | null
}
export type ItemCreateInputInputObject =
   | Extract<keyof ItemCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'tags'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'source'; alias?: string }
   | { name: 'waveform'; alias?: string }

export interface SourceCreateOneWithoutItemsInput {
   create?: SourceCreateWithoutItemsInput | null
   connect?: SourceWhereUniqueInput | null
}
export type SourceCreateOneWithoutItemsInputInputObject =
   | Extract<keyof SourceCreateOneWithoutItemsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface SourceCreateWithoutItemsInput {
   id?: string | null
   slug?: string | null
   url?: string
   type?: prisma.SourceEnum | null
   title?: string | null
   description?: string | null
   timer?: string | null
   cron?: CronCreateOneInput | null
   cover?: string | null
}
export type SourceCreateWithoutItemsInputInputObject =
   | Extract<keyof SourceCreateWithoutItemsInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'slug'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'timer'; alias?: string }
   | { name: 'cron'; alias?: string }
   | { name: 'cover'; alias?: string }

export interface ItemUpdateInput {
   slug?: string | null
   guid?: string | null
   tags?: TagUpdateManyInput | null
   title?: string | null
   description?: string | null
   publishedAt?: string | null
   download?: string | null
   url?: string | null
   length?: number | null
   type?: string | null
   source?: SourceUpdateOneWithoutItemsInput | null
   waveform?: WaveUpdateOneInput | null
}
export type ItemUpdateInputInputObject =
   | Extract<keyof ItemUpdateInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'tags'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'source'; alias?: string }
   | { name: 'waveform'; alias?: string }

export interface SourceUpdateOneWithoutItemsInput {
   create?: SourceCreateWithoutItemsInput | null
   update?: SourceUpdateWithoutItemsDataInput | null
   upsert?: SourceUpsertWithoutItemsInput | null
   delete?: boolean | null
   disconnect?: boolean | null
   connect?: SourceWhereUniqueInput | null
}
export type SourceUpdateOneWithoutItemsInputInputObject =
   | Extract<keyof SourceUpdateOneWithoutItemsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface SourceUpdateWithoutItemsDataInput {
   slug?: string | null
   url?: string | null
   type?: prisma.SourceEnum | null
   title?: string | null
   description?: string | null
   timer?: string | null
   cron?: CronUpdateOneInput | null
   cover?: string | null
}
export type SourceUpdateWithoutItemsDataInputInputObject =
   | Extract<keyof SourceUpdateWithoutItemsDataInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'type'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'timer'; alias?: string }
   | { name: 'cron'; alias?: string }
   | { name: 'cover'; alias?: string }

export interface SourceUpsertWithoutItemsInput {
   update?: SourceUpdateWithoutItemsDataInput
   create?: SourceCreateWithoutItemsInput
}
export type SourceUpsertWithoutItemsInputInputObject =
   | Extract<keyof SourceUpsertWithoutItemsInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface ItemUpdateManyMutationInput {
   slug?: string | null
   guid?: string | null
   title?: string | null
   description?: string | null
   publishedAt?: string | null
   download?: string | null
   url?: string | null
   length?: number | null
   type?: string | null
}
export type ItemUpdateManyMutationInputInputObject =
   | Extract<keyof ItemUpdateManyMutationInput, string>
   | { name: 'slug'; alias?: string }
   | { name: 'guid'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'description'; alias?: string }
   | { name: 'publishedAt'; alias?: string }
   | { name: 'download'; alias?: string }
   | { name: 'url'; alias?: string }
   | { name: 'length'; alias?: string }
   | { name: 'type'; alias?: string }

export interface WaveUpdateInput {
   url?: string | null
   wave?: WaveUpdatewaveInput | null
}
export type WaveUpdateInputInputObject =
   | Extract<keyof WaveUpdateInput, string>
   | { name: 'url'; alias?: string }
   | { name: 'wave'; alias?: string }

export interface WaveUpdateManyMutationInput {
   url?: string | null
   wave?: WaveUpdatewaveInput | null
}
export type WaveUpdateManyMutationInputInputObject =
   | Extract<keyof WaveUpdateManyMutationInput, string>
   | { name: 'url'; alias?: string }
   | { name: 'wave'; alias?: string }

export interface CronUpdateInput {
   pid?: number | null
   health?: boolean | null
   status?: prisma.CronEnum | null
   lastMessage?: string | null
}
export type CronUpdateInputInputObject =
   | Extract<keyof CronUpdateInput, string>
   | { name: 'pid'; alias?: string }
   | { name: 'health'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'lastMessage'; alias?: string }

export interface CronUpdateManyMutationInput {
   pid?: number | null
   health?: boolean | null
   status?: prisma.CronEnum | null
   lastMessage?: string | null
}
export type CronUpdateManyMutationInputInputObject =
   | Extract<keyof CronUpdateManyMutationInput, string>
   | { name: 'pid'; alias?: string }
   | { name: 'health'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'lastMessage'; alias?: string }

export interface UserSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: UserWhereInput | null
   AND?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
   | Extract<keyof UserSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface ConfigSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: ConfigWhereInput | null
   AND?: ConfigSubscriptionWhereInput[]
}
export type ConfigSubscriptionWhereInputInputObject =
   | Extract<keyof ConfigSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface SourceSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: SourceWhereInput | null
   AND?: SourceSubscriptionWhereInput[]
}
export type SourceSubscriptionWhereInputInputObject =
   | Extract<keyof SourceSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TagSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: TagWhereInput | null
   AND?: TagSubscriptionWhereInput[]
}
export type TagSubscriptionWhereInputInputObject =
   | Extract<keyof TagSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface ItemSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: ItemWhereInput | null
   AND?: ItemSubscriptionWhereInput[]
}
export type ItemSubscriptionWhereInputInputObject =
   | Extract<keyof ItemSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface WaveSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: WaveWhereInput | null
   AND?: WaveSubscriptionWhereInput[]
}
export type WaveSubscriptionWhereInputInputObject =
   | Extract<keyof WaveSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface CronSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: CronWhereInput | null
   AND?: CronSubscriptionWhereInput[]
}
export type CronSubscriptionWhereInputInputObject =
   | Extract<keyof CronSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export type UserOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'name_ASC'
   | 'name_DESC'
   | 'bio_ASC'
   | 'bio_DESC'
   | 'userName_ASC'
   | 'userName_DESC'
   | 'email_ASC'
   | 'email_DESC'
   | 'password_ASC'
   | 'password_DESC'

export type ConfigOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'timeZone_ASC'
   | 'timeZone_DESC'
   | 'liveUrl_ASC'
   | 'liveUrl_DESC'
   | 'liveStatusUrl_ASC'
   | 'liveStatusUrl_DESC'
   | 'placeholderCover_ASC'
   | 'placeholderCover_DESC'

export type SourceEnumValues = 'PODCAST' | 'NEWS' | 'PAGE'

export type CronEnumValues = 'STARTING' | 'RUNNING' | 'IDLE' | 'STOPED'

export type ItemOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'slug_ASC'
   | 'slug_DESC'
   | 'guid_ASC'
   | 'guid_DESC'
   | 'title_ASC'
   | 'title_DESC'
   | 'description_ASC'
   | 'description_DESC'
   | 'publishedAt_ASC'
   | 'publishedAt_DESC'
   | 'download_ASC'
   | 'download_DESC'
   | 'url_ASC'
   | 'url_DESC'
   | 'length_ASC'
   | 'length_DESC'
   | 'type_ASC'
   | 'type_DESC'

export type TagOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'tag_ASC'
   | 'tag_DESC'
   | 'name_ASC'
   | 'name_DESC'
   | 'text_ASC'
   | 'text_DESC'

export type SourceOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'slug_ASC'
   | 'slug_DESC'
   | 'url_ASC'
   | 'url_DESC'
   | 'type_ASC'
   | 'type_DESC'
   | 'title_ASC'
   | 'title_DESC'
   | 'description_ASC'
   | 'description_DESC'
   | 'timer_ASC'
   | 'timer_DESC'
   | 'cover_ASC'
   | 'cover_DESC'

export type WaveOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'url_ASC'
   | 'url_DESC'

export type CronOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'createdAt_ASC'
   | 'createdAt_DESC'
   | 'updatedAt_ASC'
   | 'updatedAt_DESC'
   | 'pid_ASC'
   | 'pid_DESC'
   | 'health_ASC'
   | 'health_DESC'
   | 'status_ASC'
   | 'status_DESC'
   | 'lastMessage_ASC'
   | 'lastMessage_DESC'

export type MutationTypeValues = 'CREATED' | 'UPDATED' | 'DELETED'
